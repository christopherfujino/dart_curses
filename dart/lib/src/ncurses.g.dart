// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int> _COLORS = _lookup<ffi.Int>('COLORS');

  int get COLORS => _COLORS.value;

  set COLORS(int value) => _COLORS.value = value;

  int COLOR_PAIR(
    int arg0,
  ) {
    return _COLOR_PAIR(
      arg0,
    );
  }

  late final _COLOR_PAIRPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('COLOR_PAIR');
  late final _COLOR_PAIR = _COLOR_PAIRPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Int> _COLOR_PAIRS =
      _lookup<ffi.Int>('COLOR_PAIRS');

  int get COLOR_PAIRS => _COLOR_PAIRS.value;

  set COLOR_PAIRS(int value) => _COLOR_PAIRS.value = value;

  late final ffi.Pointer<ffi.Int> _COLS = _lookup<ffi.Int>('COLS');

  int get COLS => _COLS.value;

  set COLS(int value) => _COLS.value = value;

  late final ffi.Pointer<ffi.Int> _ESCDELAY = _lookup<ffi.Int>('ESCDELAY');

  int get ESCDELAY => _ESCDELAY.value;

  set ESCDELAY(int value) => _ESCDELAY.value = value;

  late final ffi.Pointer<ffi.Int> _LINES = _lookup<ffi.Int>('LINES');

  int get LINES => _LINES.value;

  set LINES(int value) => _LINES.value = value;

  int PAIR_NUMBER(
    int arg0,
  ) {
    return _PAIR_NUMBER(
      arg0,
    );
  }

  late final _PAIR_NUMBERPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('PAIR_NUMBER');
  late final _PAIR_NUMBER = _PAIR_NUMBERPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Int> _TABSIZE = _lookup<ffi.Int>('TABSIZE');

  int get TABSIZE => _TABSIZE.value;

  set TABSIZE(int value) => _TABSIZE.value = value;

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> _traceattr(
    int arg0,
  ) {
    return __traceattr(
      arg0,
    );
  }

  late final __traceattrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(attr_t)>>(
          '_traceattr');
  late final __traceattr =
      __traceattrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> _traceattr2(
    int arg0,
    int arg1,
  ) {
    return __traceattr2(
      arg0,
      arg1,
    );
  }

  late final __traceattr2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, chtype)>>(
      '_traceattr2');
  late final __traceattr2 =
      __traceattr2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> _tracechar(
    int arg0,
  ) {
    return __tracechar(
      arg0,
    );
  }

  late final __tracecharPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          '_tracechar');
  late final __tracechar =
      __tracecharPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> _tracechtype(
    int arg0,
  ) {
    return __tracechtype(
      arg0,
    );
  }

  late final __tracechtypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(chtype)>>(
          '_tracechtype');
  late final __tracechtype =
      __tracechtypePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> _tracechtype2(
    int arg0,
    int arg1,
  ) {
    return __tracechtype2(
      arg0,
      arg1,
    );
  }

  late final __tracechtype2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, chtype)>>(
      '_tracechtype2');
  late final __tracechtype2 =
      __tracechtype2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  /// Debugging : use with libncurses_g.a
  void _tracef(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return __tracef(
      arg0,
    );
  }

  late final __tracefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          '_tracef');
  late final __tracef =
      __tracefPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<chtype>> _acs_map =
      _lookup<ffi.Pointer<chtype>>('acs_map');

  ffi.Pointer<chtype> get acs_map => _acs_map.value;

  set acs_map(ffi.Pointer<chtype> value) => _acs_map.value = value;

  /// Function prototypes.  This is the complete X/Open Curses list of required
  /// functions.  Those marked `generated' will have sources generated from the
  /// macro definitions later in this file, in order to satisfy XPG4.2
  /// requirements.
  int addch(
    int arg0,
  ) {
    return _addch(
      arg0,
    );
  }

  late final _addchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('addch');
  late final _addch = _addchPtr.asFunction<int Function(int)>();

  int addchnstr(
    ffi.Pointer<chtype> arg0,
    int arg1,
  ) {
    return _addchnstr(
      arg0,
      arg1,
    );
  }

  late final _addchnstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<chtype>, ffi.Int)>>(
      'addchnstr');
  late final _addchnstr =
      _addchnstrPtr.asFunction<int Function(ffi.Pointer<chtype>, int)>();

  int addchstr(
    ffi.Pointer<chtype> arg0,
  ) {
    return _addchstr(
      arg0,
    );
  }

  late final _addchstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<chtype>)>>(
          'addchstr');
  late final _addchstr =
      _addchstrPtr.asFunction<int Function(ffi.Pointer<chtype>)>();

  int addnstr(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _addnstr(
      arg0,
      arg1,
    );
  }

  late final _addnstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'addnstr');
  late final _addnstr =
      _addnstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int addstr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _addstr(
      arg0,
    );
  }

  late final _addstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'addstr');
  late final _addstr =
      _addstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int alloc_pair(
    int arg0,
    int arg1,
  ) {
    return _alloc_pair(
      arg0,
      arg1,
    );
  }

  late final _alloc_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'alloc_pair');
  late final _alloc_pair = _alloc_pairPtr.asFunction<int Function(int, int)>();

  int alloc_pair_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _alloc_pair_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _alloc_pair_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('alloc_pair_sp');
  late final _alloc_pair_sp = _alloc_pair_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int)>();

  int assume_default_colors(
    int arg0,
    int arg1,
  ) {
    return _assume_default_colors(
      arg0,
      arg1,
    );
  }

  late final _assume_default_colorsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'assume_default_colors');
  late final _assume_default_colors =
      _assume_default_colorsPtr.asFunction<int Function(int, int)>();

  int assume_default_colors_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _assume_default_colors_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _assume_default_colors_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int,
              ffi.Int)>>('assume_default_colors_sp');
  late final _assume_default_colors_sp = _assume_default_colors_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int)>();

  int attr_get(
    ffi.Pointer<attr_t> arg0,
    ffi.Pointer<ffi.Short> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _attr_get(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _attr_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<attr_t>, ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Void>)>>('attr_get');
  late final _attr_get = _attr_getPtr.asFunction<
      int Function(ffi.Pointer<attr_t>, ffi.Pointer<ffi.Short>,
          ffi.Pointer<ffi.Void>)>();

  int attr_off(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _attr_off(
      arg0,
      arg1,
    );
  }

  late final _attr_offPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(attr_t, ffi.Pointer<ffi.Void>)>>(
      'attr_off');
  late final _attr_off =
      _attr_offPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int attr_on(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _attr_on(
      arg0,
      arg1,
    );
  }

  late final _attr_onPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(attr_t, ffi.Pointer<ffi.Void>)>>(
      'attr_on');
  late final _attr_on =
      _attr_onPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int attr_set(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _attr_set(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _attr_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              attr_t, ffi.Short, ffi.Pointer<ffi.Void>)>>('attr_set');
  late final _attr_set =
      _attr_setPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int attroff(
    int arg0,
  ) {
    return _attroff(
      arg0,
    );
  }

  late final _attroffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('attroff');
  late final _attroff = _attroffPtr.asFunction<int Function(int)>();

  int attron(
    int arg0,
  ) {
    return _attron(
      arg0,
    );
  }

  late final _attronPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('attron');
  late final _attron = _attronPtr.asFunction<int Function(int)>();

  int attrset(
    int arg0,
  ) {
    return _attrset(
      arg0,
    );
  }

  late final _attrsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('attrset');
  late final _attrset = _attrsetPtr.asFunction<int Function(int)>();

  int baudrate() {
    return _baudrate();
  }

  late final _baudratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('baudrate');
  late final _baudrate = _baudratePtr.asFunction<int Function()>();

  int baudrate_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _baudrate_sp(
      arg0,
    );
  }

  late final _baudrate_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'baudrate_sp');
  late final _baudrate_sp =
      _baudrate_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int beep() {
    return _beep();
  }

  late final _beepPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('beep');
  late final _beep = _beepPtr.asFunction<int Function()>();

  int beep_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _beep_sp(
      arg0,
    );
  }

  late final _beep_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'beep_sp');
  late final _beep_sp =
      _beep_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int bkgd(
    int arg0,
  ) {
    return _bkgd(
      arg0,
    );
  }

  late final _bkgdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('bkgd');
  late final _bkgd = _bkgdPtr.asFunction<int Function(int)>();

  void bkgdset(
    int arg0,
  ) {
    return _bkgdset(
      arg0,
    );
  }

  late final _bkgdsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(chtype)>>('bkgdset');
  late final _bkgdset = _bkgdsetPtr.asFunction<void Function(int)>();

  int border(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    return _border(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _borderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(chtype, chtype, chtype, chtype, chtype, chtype,
              chtype, chtype)>>('border');
  late final _border = _borderPtr
      .asFunction<int Function(int, int, int, int, int, int, int, int)>();

  int box(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _box(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _boxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, chtype, chtype)>>('box');
  late final _box =
      _boxPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  bool can_change_color() {
    return _can_change_color();
  }

  late final _can_change_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('can_change_color');
  late final _can_change_color =
      _can_change_colorPtr.asFunction<bool Function()>();

  bool can_change_color_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _can_change_color_sp(
      arg0,
    );
  }

  late final _can_change_color_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'can_change_color_sp');
  late final _can_change_color_sp =
      _can_change_color_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  int cbreak() {
    return _cbreak();
  }

  late final _cbreakPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cbreak');
  late final _cbreak = _cbreakPtr.asFunction<int Function()>();

  int cbreak_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _cbreak_sp(
      arg0,
    );
  }

  late final _cbreak_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'cbreak_sp');
  late final _cbreak_sp =
      _cbreak_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int chgat(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _chgat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _chgatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, attr_t, ffi.Short, ffi.Pointer<ffi.Void>)>>('chgat');
  late final _chgat = _chgatPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int clear() {
    return _clear();
  }

  late final _clearPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clear');
  late final _clear = _clearPtr.asFunction<int Function()>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int clearok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _clearok(
      arg0,
      arg1,
    );
  }

  late final _clearokPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'clearok');
  late final _clearok =
      _clearokPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  int clrtobot() {
    return _clrtobot();
  }

  late final _clrtobotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clrtobot');
  late final _clrtobot = _clrtobotPtr.asFunction<int Function()>();

  int clrtoeol() {
    return _clrtoeol();
  }

  late final _clrtoeolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clrtoeol');
  late final _clrtoeol = _clrtoeolPtr.asFunction<int Function()>();

  int color_content(
    int arg0,
    ffi.Pointer<ffi.Short> arg1,
    ffi.Pointer<ffi.Short> arg2,
    ffi.Pointer<ffi.Short> arg3,
  ) {
    return _color_content(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _color_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Short,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>)>>('color_content');
  late final _color_content = _color_contentPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Short>,
          ffi.Pointer<ffi.Short>)>();

  int color_content_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<ffi.Short> arg2,
    ffi.Pointer<ffi.Short> arg3,
    ffi.Pointer<ffi.Short> arg4,
  ) {
    return _color_content_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _color_content_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>,
              ffi.Short,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>)>>('color_content_sp');
  late final _color_content_sp = _color_content_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<ffi.Short>,
          ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Short>)>();

  int color_set(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _color_set(
      arg0,
      arg1,
    );
  }

  late final _color_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Short, ffi.Pointer<ffi.Void>)>>('color_set');
  late final _color_set =
      _color_setPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int copywin(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<WINDOW> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _copywin(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _copywinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>,
              ffi.Pointer<WINDOW>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('copywin');
  late final _copywin = _copywinPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<WINDOW>, int, int, int, int,
          int, int, int)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int curs_set(
    int arg0,
  ) {
    return _curs_set(
      arg0,
    );
  }

  late final _curs_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('curs_set');
  late final _curs_set = _curs_setPtr.asFunction<int Function(int)>();

  int curs_set_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _curs_set_sp(
      arg0,
      arg1,
    );
  }

  late final _curs_set_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'curs_set_sp');
  late final _curs_set_sp =
      _curs_set_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  late final ffi.Pointer<ffi.Pointer<WINDOW>> _curscr =
      _lookup<ffi.Pointer<WINDOW>>('curscr');

  ffi.Pointer<WINDOW> get curscr => _curscr.value;

  set curscr(ffi.Pointer<WINDOW> value) => _curscr.value = value;

  int curses_trace(
    int arg0,
  ) {
    return _curses_trace(
      arg0,
    );
  }

  late final _curses_tracePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'curses_trace');
  late final _curses_trace = _curses_tracePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> curses_version() {
    return _curses_version();
  }

  late final _curses_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'curses_version');
  late final _curses_version =
      _curses_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int def_prog_mode() {
    return _def_prog_mode();
  }

  late final _def_prog_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('def_prog_mode');
  late final _def_prog_mode = _def_prog_modePtr.asFunction<int Function()>();

  int def_prog_mode_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _def_prog_mode_sp(
      arg0,
    );
  }

  late final _def_prog_mode_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'def_prog_mode_sp');
  late final _def_prog_mode_sp =
      _def_prog_mode_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int def_shell_mode() {
    return _def_shell_mode();
  }

  late final _def_shell_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('def_shell_mode');
  late final _def_shell_mode = _def_shell_modePtr.asFunction<int Function()>();

  int def_shell_mode_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _def_shell_mode_sp(
      arg0,
    );
  }

  late final _def_shell_mode_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'def_shell_mode_sp');
  late final _def_shell_mode_sp =
      _def_shell_mode_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int define_key(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _define_key(
      arg0,
      arg1,
    );
  }

  late final _define_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'define_key');
  late final _define_key =
      _define_keyPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int define_key_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _define_key_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _define_key_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('define_key_sp');
  late final _define_key_sp = _define_key_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>, int)>();

  int delay_output(
    int arg0,
  ) {
    return _delay_output(
      arg0,
    );
  }

  late final _delay_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('delay_output');
  late final _delay_output = _delay_outputPtr.asFunction<int Function(int)>();

  int delay_output_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _delay_output_sp(
      arg0,
      arg1,
    );
  }

  late final _delay_output_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'delay_output_sp');
  late final _delay_output_sp =
      _delay_output_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int delch() {
    return _delch();
  }

  late final _delchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('delch');
  late final _delch = _delchPtr.asFunction<int Function()>();

  int deleteln() {
    return _deleteln();
  }

  late final _deletelnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('deleteln');
  late final _deleteln = _deletelnPtr.asFunction<int Function()>();

  void delscreen(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _delscreen(
      arg0,
    );
  }

  late final _delscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'delscreen');
  late final _delscreen =
      _delscreenPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int delwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _delwin(
      arg0,
    );
  }

  late final _delwinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'delwin');
  late final _delwin =
      _delwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  ffi.Pointer<WINDOW> derwin(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _derwin(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _derwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('derwin');
  late final _derwin = _derwinPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, int, int, int, int)>();

  int doupdate() {
    return _doupdate();
  }

  late final _doupdatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('doupdate');
  late final _doupdate = _doupdatePtr.asFunction<int Function()>();

  int doupdate_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _doupdate_sp(
      arg0,
    );
  }

  late final _doupdate_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'doupdate_sp');
  late final _doupdate_sp =
      _doupdate_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<WINDOW> dupwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _dupwin(
      arg0,
    );
  }

  late final _dupwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>)>>('dupwin');
  late final _dupwin = _dupwinPtr
      .asFunction<ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>)>();

  int echo() {
    return _echo();
  }

  late final _echoPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('echo');
  late final _echo = _echoPtr.asFunction<int Function()>();

  int echo_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _echo_sp(
      arg0,
    );
  }

  late final _echo_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'echo_sp');
  late final _echo_sp =
      _echo_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int echochar(
    int arg0,
  ) {
    return _echochar(
      arg0,
    );
  }

  late final _echocharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('echochar');
  late final _echochar = _echocharPtr.asFunction<int Function(int)>();

  int endwin() {
    return _endwin();
  }

  late final _endwinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('endwin');
  late final _endwin = _endwinPtr.asFunction<int Function()>();

  int endwin_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _endwin_sp(
      arg0,
    );
  }

  late final _endwin_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'endwin_sp');
  late final _endwin_sp =
      _endwin_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int erase() {
    return _erase();
  }

  late final _erasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('erase');
  late final _erase = _erasePtr.asFunction<int Function()>();

  int erasechar() {
    return _erasechar();
  }

  late final _erasecharPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function()>>('erasechar');
  late final _erasechar = _erasecharPtr.asFunction<int Function()>();

  int erasechar_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _erasechar_sp(
      arg0,
    );
  }

  late final _erasechar_spPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Pointer<SCREEN>)>>(
          'erasechar_sp');
  late final _erasechar_sp =
      _erasechar_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  void exit_curses(
    int arg0,
  ) {
    return _exit_curses(
      arg0,
    );
  }

  late final _exit_cursesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit_curses');
  late final _exit_curses = _exit_cursesPtr.asFunction<void Function(int)>();

  int extended_color_content(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _extended_color_content(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _extended_color_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('extended_color_content');
  late final _extended_color_content = _extended_color_contentPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int extended_color_content_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
    ffi.Pointer<ffi.Int> arg4,
  ) {
    return _extended_color_content_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _extended_color_content_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('extended_color_content_sp');
  late final _extended_color_content_sp =
      _extended_color_content_spPtr.asFunction<
          int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int extended_pair_content(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _extended_pair_content(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _extended_pair_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('extended_pair_content');
  late final _extended_pair_content = _extended_pair_contentPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int extended_pair_content_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _extended_pair_content_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _extended_pair_content_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('extended_pair_content_sp');
  late final _extended_pair_content_sp =
      _extended_pair_content_spPtr.asFunction<
          int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int extended_slk_color(
    int arg0,
  ) {
    return _extended_slk_color(
      arg0,
    );
  }

  late final _extended_slk_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'extended_slk_color');
  late final _extended_slk_color =
      _extended_slk_colorPtr.asFunction<int Function(int)>();

  int extended_slk_color_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _extended_slk_color_sp(
      arg0,
      arg1,
    );
  }

  late final _extended_slk_color_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'extended_slk_color_sp');
  late final _extended_slk_color_sp = _extended_slk_color_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void filter() {
    return _filter();
  }

  late final _filterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('filter');
  late final _filter = _filterPtr.asFunction<void Function()>();

  void filter_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _filter_sp(
      arg0,
    );
  }

  late final _filter_spPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'filter_sp');
  late final _filter_sp =
      _filter_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int find_pair(
    int arg0,
    int arg1,
  ) {
    return _find_pair(
      arg0,
      arg1,
    );
  }

  late final _find_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'find_pair');
  late final _find_pair = _find_pairPtr.asFunction<int Function(int, int)>();

  int find_pair_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _find_pair_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _find_pair_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('find_pair_sp');
  late final _find_pair_sp = _find_pair_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int)>();

  int flash() {
    return _flash();
  }

  late final _flashPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('flash');
  late final _flash = _flashPtr.asFunction<int Function()>();

  int flash_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _flash_sp(
      arg0,
    );
  }

  late final _flash_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'flash_sp');
  late final _flash_sp =
      _flash_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int flushinp() {
    return _flushinp();
  }

  late final _flushinpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('flushinp');
  late final _flushinp = _flushinpPtr.asFunction<int Function()>();

  int flushinp_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _flushinp_sp(
      arg0,
    );
  }

  late final _flushinp_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'flushinp_sp');
  late final _flushinp_sp =
      _flushinp_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int free_pair(
    int arg0,
  ) {
    return _free_pair(
      arg0,
    );
  }

  late final _free_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('free_pair');
  late final _free_pair = _free_pairPtr.asFunction<int Function(int)>();

  int free_pair_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _free_pair_sp(
      arg0,
      arg1,
    );
  }

  late final _free_pair_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'free_pair_sp');
  late final _free_pair_sp =
      _free_pair_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int get_escdelay() {
    return _get_escdelay();
  }

  late final _get_escdelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_escdelay');
  late final _get_escdelay = _get_escdelayPtr.asFunction<int Function()>();

  int get_escdelay_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _get_escdelay_sp(
      arg0,
    );
  }

  late final _get_escdelay_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'get_escdelay_sp');
  late final _get_escdelay_sp =
      _get_escdelay_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  /// These functions are not in X/Open, but we use them in macro definitions:
  int getattrs(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getattrs(
      arg0,
    );
  }

  late final _getattrsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getattrs');
  late final _getattrs =
      _getattrsPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getbegx(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getbegx(
      arg0,
    );
  }

  late final _getbegxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getbegx');
  late final _getbegx =
      _getbegxPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getbegy(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getbegy(
      arg0,
    );
  }

  late final _getbegyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getbegy');
  late final _getbegy =
      _getbegyPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getbkgd(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getbkgd(
      arg0,
    );
  }

  late final _getbkgdPtr =
      _lookup<ffi.NativeFunction<chtype Function(ffi.Pointer<WINDOW>)>>(
          'getbkgd');
  late final _getbkgd =
      _getbkgdPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getch() {
    return _getch();
  }

  late final _getchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getch');
  late final _getch = _getchPtr.asFunction<int Function()>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int getcurx(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getcurx(
      arg0,
    );
  }

  late final _getcurxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getcurx');
  late final _getcurx =
      _getcurxPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getcury(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getcury(
      arg0,
    );
  }

  late final _getcuryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getcury');
  late final _getcury =
      _getcuryPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int getmaxx(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getmaxx(
      arg0,
    );
  }

  late final _getmaxxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getmaxx');
  late final _getmaxx =
      _getmaxxPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getmaxy(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getmaxy(
      arg0,
    );
  }

  late final _getmaxyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getmaxy');
  late final _getmaxy =
      _getmaxyPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getmouse(
    ffi.Pointer<MEVENT> arg0,
  ) {
    return _getmouse(
      arg0,
    );
  }

  late final _getmousePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MEVENT>)>>(
          'getmouse');
  late final _getmouse =
      _getmousePtr.asFunction<int Function(ffi.Pointer<MEVENT>)>();

  int getmouse_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<MEVENT> arg1,
  ) {
    return _getmouse_sp(
      arg0,
      arg1,
    );
  }

  late final _getmouse_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<MEVENT>)>>('getmouse_sp');
  late final _getmouse_sp = _getmouse_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<MEVENT>)>();

  int getnstr(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getnstr(
      arg0,
      arg1,
    );
  }

  late final _getnstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getnstr');
  late final _getnstr =
      _getnstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getparx(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getparx(
      arg0,
    );
  }

  late final _getparxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getparx');
  late final _getparx =
      _getparxPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getpary(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _getpary(
      arg0,
    );
  }

  late final _getparyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'getpary');
  late final _getpary =
      _getparyPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int getstr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getstr(
      arg0,
    );
  }

  late final _getstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'getstr');
  late final _getstr =
      _getstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<WINDOW> getwin(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getwin(
      arg0,
    );
  }

  late final _getwinPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<WINDOW> Function(ffi.Pointer<FILE>)>>(
      'getwin');
  late final _getwin =
      _getwinPtr.asFunction<ffi.Pointer<WINDOW> Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<WINDOW> getwin_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _getwin_sp(
      arg0,
      arg1,
    );
  }

  late final _getwin_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<FILE>)>>('getwin_sp');
  late final _getwin_sp = _getwin_spPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<SCREEN>, ffi.Pointer<FILE>)>();

  int halfdelay(
    int arg0,
  ) {
    return _halfdelay(
      arg0,
    );
  }

  late final _halfdelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('halfdelay');
  late final _halfdelay = _halfdelayPtr.asFunction<int Function(int)>();

  int halfdelay_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _halfdelay_sp(
      arg0,
      arg1,
    );
  }

  late final _halfdelay_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'halfdelay_sp');
  late final _halfdelay_sp =
      _halfdelay_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  bool has_colors() {
    return _has_colors();
  }

  late final _has_colorsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('has_colors');
  late final _has_colors = _has_colorsPtr.asFunction<bool Function()>();

  bool has_colors_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _has_colors_sp(
      arg0,
    );
  }

  late final _has_colors_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'has_colors_sp');
  late final _has_colors_sp =
      _has_colors_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  bool has_ic() {
    return _has_ic();
  }

  late final _has_icPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('has_ic');
  late final _has_ic = _has_icPtr.asFunction<bool Function()>();

  bool has_ic_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _has_ic_sp(
      arg0,
    );
  }

  late final _has_ic_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'has_ic_sp');
  late final _has_ic_sp =
      _has_ic_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  bool has_il() {
    return _has_il();
  }

  late final _has_ilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('has_il');
  late final _has_il = _has_ilPtr.asFunction<bool Function()>();

  bool has_il_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _has_il_sp(
      arg0,
    );
  }

  late final _has_il_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'has_il_sp');
  late final _has_il_sp =
      _has_il_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  int has_key(
    int arg0,
  ) {
    return _has_key(
      arg0,
    );
  }

  late final _has_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('has_key');
  late final _has_key = _has_keyPtr.asFunction<int Function(int)>();

  int has_key_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _has_key_sp(
      arg0,
      arg1,
    );
  }

  late final _has_key_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'has_key_sp');
  late final _has_key_sp =
      _has_key_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  bool has_mouse() {
    return _has_mouse();
  }

  late final _has_mousePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('has_mouse');
  late final _has_mouse = _has_mousePtr.asFunction<bool Function()>();

  bool has_mouse_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _has_mouse_sp(
      arg0,
    );
  }

  late final _has_mouse_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'has_mouse_sp');
  late final _has_mouse_sp =
      _has_mouse_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  int hline(
    int arg0,
    int arg1,
  ) {
    return _hline(
      arg0,
      arg1,
    );
  }

  late final _hlinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype, ffi.Int)>>('hline');
  late final _hline = _hlinePtr.asFunction<int Function(int, int)>();

  void idcok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _idcok(
      arg0,
      arg1,
    );
  }

  late final _idcokPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'idcok');
  late final _idcok =
      _idcokPtr.asFunction<void Function(ffi.Pointer<WINDOW>, bool)>();

  int idlok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _idlok(
      arg0,
      arg1,
    );
  }

  late final _idlokPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'idlok');
  late final _idlok =
      _idlokPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  void immedok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _immedok(
      arg0,
      arg1,
    );
  }

  late final _immedokPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'immedok');
  late final _immedok =
      _immedokPtr.asFunction<void Function(ffi.Pointer<WINDOW>, bool)>();

  int inch() {
    return _inch();
  }

  late final _inchPtr = _lookup<ffi.NativeFunction<chtype Function()>>('inch');
  late final _inch = _inchPtr.asFunction<int Function()>();

  int inchnstr(
    ffi.Pointer<chtype> arg0,
    int arg1,
  ) {
    return _inchnstr(
      arg0,
      arg1,
    );
  }

  late final _inchnstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<chtype>, ffi.Int)>>(
      'inchnstr');
  late final _inchnstr =
      _inchnstrPtr.asFunction<int Function(ffi.Pointer<chtype>, int)>();

  int inchstr(
    ffi.Pointer<chtype> arg0,
  ) {
    return _inchstr(
      arg0,
    );
  }

  late final _inchstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<chtype>)>>(
          'inchstr');
  late final _inchstr =
      _inchstrPtr.asFunction<int Function(ffi.Pointer<chtype>)>();

  int init_color(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _init_color(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _init_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Short, ffi.Short, ffi.Short, ffi.Short)>>('init_color');
  late final _init_color =
      _init_colorPtr.asFunction<int Function(int, int, int, int)>();

  int init_color_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _init_color_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _init_color_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Short, ffi.Short, ffi.Short,
              ffi.Short)>>('init_color_sp');
  late final _init_color_sp = _init_color_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int, int, int)>();

  int init_extended_color(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _init_extended_color(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _init_extended_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('init_extended_color');
  late final _init_extended_color =
      _init_extended_colorPtr.asFunction<int Function(int, int, int, int)>();

  int init_extended_color_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _init_extended_color_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _init_extended_color_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('init_extended_color_sp');
  late final _init_extended_color_sp = _init_extended_color_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int, int, int)>();

  int init_extended_pair(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _init_extended_pair(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _init_extended_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'init_extended_pair');
  late final _init_extended_pair =
      _init_extended_pairPtr.asFunction<int Function(int, int, int)>();

  int init_extended_pair_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _init_extended_pair_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _init_extended_pair_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Int,
              ffi.Int)>>('init_extended_pair_sp');
  late final _init_extended_pair_sp = _init_extended_pair_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int, int)>();

  int init_pair(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _init_pair(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _init_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Short, ffi.Short, ffi.Short)>>('init_pair');
  late final _init_pair =
      _init_pairPtr.asFunction<int Function(int, int, int)>();

  int init_pair_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _init_pair_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _init_pair_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Short, ffi.Short,
              ffi.Short)>>('init_pair_sp');
  late final _init_pair_sp = _init_pair_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int, int)>();

  ffi.Pointer<WINDOW> initscr() {
    return _initscr();
  }

  late final _initscrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WINDOW> Function()>>('initscr');
  late final _initscr =
      _initscrPtr.asFunction<ffi.Pointer<WINDOW> Function()>();

  int innstr(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _innstr(
      arg0,
      arg1,
    );
  }

  late final _innstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'innstr');
  late final _innstr =
      _innstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int insch(
    int arg0,
  ) {
    return _insch(
      arg0,
    );
  }

  late final _inschPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('insch');
  late final _insch = _inschPtr.asFunction<int Function(int)>();

  int insdelln(
    int arg0,
  ) {
    return _insdelln(
      arg0,
    );
  }

  late final _insdellnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('insdelln');
  late final _insdelln = _insdellnPtr.asFunction<int Function(int)>();

  int insertln() {
    return _insertln();
  }

  late final _insertlnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('insertln');
  late final _insertln = _insertlnPtr.asFunction<int Function()>();

  int insnstr(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _insnstr(
      arg0,
      arg1,
    );
  }

  late final _insnstrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'insnstr');
  late final _insnstr =
      _insnstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int insstr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _insstr(
      arg0,
    );
  }

  late final _insstrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'insstr');
  late final _insstr =
      _insstrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int instr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _instr(
      arg0,
    );
  }

  late final _instrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'instr');
  late final _instr =
      _instrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int intrflush(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _intrflush(
      arg0,
      arg1,
    );
  }

  late final _intrflushPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'intrflush');
  late final _intrflush =
      _intrflushPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  int intrflush_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<WINDOW> arg1,
    bool arg2,
  ) {
    return _intrflush_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _intrflush_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Pointer<WINDOW>,
              ffi.Bool)>>('intrflush_sp');
  late final _intrflush_sp = _intrflush_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, ffi.Pointer<WINDOW>, bool)>();

  bool is_cleared(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_cleared(
      arg0,
    );
  }

  late final _is_clearedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_cleared');
  late final _is_cleared =
      _is_clearedPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_idcok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_idcok(
      arg0,
    );
  }

  late final _is_idcokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_idcok');
  late final _is_idcok =
      _is_idcokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_idlok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_idlok(
      arg0,
    );
  }

  late final _is_idlokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_idlok');
  late final _is_idlok =
      _is_idlokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_immedok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_immedok(
      arg0,
    );
  }

  late final _is_immedokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_immedok');
  late final _is_immedok =
      _is_immedokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_keypad(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_keypad(
      arg0,
    );
  }

  late final _is_keypadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_keypad');
  late final _is_keypad =
      _is_keypadPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_leaveok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_leaveok(
      arg0,
    );
  }

  late final _is_leaveokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_leaveok');
  late final _is_leaveok =
      _is_leaveokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_linetouched(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _is_linetouched(
      arg0,
      arg1,
    );
  }

  late final _is_linetouchedPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'is_linetouched');
  late final _is_linetouched =
      _is_linetouchedPtr.asFunction<bool Function(ffi.Pointer<WINDOW>, int)>();

  bool is_nodelay(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_nodelay(
      arg0,
    );
  }

  late final _is_nodelayPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_nodelay');
  late final _is_nodelay =
      _is_nodelayPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_notimeout(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_notimeout(
      arg0,
    );
  }

  late final _is_notimeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_notimeout');
  late final _is_notimeout =
      _is_notimeoutPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_pad(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_pad(
      arg0,
    );
  }

  late final _is_padPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_pad');
  late final _is_pad =
      _is_padPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_scrollok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_scrollok(
      arg0,
    );
  }

  late final _is_scrollokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_scrollok');
  late final _is_scrollok =
      _is_scrollokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_subwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_subwin(
      arg0,
    );
  }

  late final _is_subwinPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_subwin');
  late final _is_subwin =
      _is_subwinPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_syncok(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_syncok(
      arg0,
    );
  }

  late final _is_syncokPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_syncok');
  late final _is_syncok =
      _is_syncokPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool is_term_resized(
    int arg0,
    int arg1,
  ) {
    return _is_term_resized(
      arg0,
      arg1,
    );
  }

  late final _is_term_resizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'is_term_resized');
  late final _is_term_resized =
      _is_term_resizedPtr.asFunction<bool Function(int, int)>();

  bool is_term_resized_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _is_term_resized_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _is_term_resized_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('is_term_resized_sp');
  late final _is_term_resized_sp = _is_term_resized_spPtr
      .asFunction<bool Function(ffi.Pointer<SCREEN>, int, int)>();

  bool is_wintouched(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _is_wintouched(
      arg0,
    );
  }

  late final _is_wintouchedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WINDOW>)>>(
          'is_wintouched');
  late final _is_wintouched =
      _is_wintouchedPtr.asFunction<bool Function(ffi.Pointer<WINDOW>)>();

  bool isendwin() {
    return _isendwin();
  }

  late final _isendwinPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('isendwin');
  late final _isendwin = _isendwinPtr.asFunction<bool Function()>();

  bool isendwin_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _isendwin_sp(
      arg0,
    );
  }

  late final _isendwin_spPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<SCREEN>)>>(
          'isendwin_sp');
  late final _isendwin_sp =
      _isendwin_spPtr.asFunction<bool Function(ffi.Pointer<SCREEN>)>();

  int key_defined(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _key_defined(
      arg0,
    );
  }

  late final _key_definedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'key_defined');
  late final _key_defined =
      _key_definedPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int key_defined_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _key_defined_sp(
      arg0,
      arg1,
    );
  }

  late final _key_defined_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>>('key_defined_sp');
  late final _key_defined_sp = _key_defined_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> keybound(
    int arg0,
    int arg1,
  ) {
    return _keybound(
      arg0,
      arg1,
    );
  }

  late final _keyboundPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Int)>>(
      'keybound');
  late final _keybound =
      _keyboundPtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> keybound_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _keybound_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _keybound_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('keybound_sp');
  late final _keybound_sp = _keybound_spPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>, int, int)>();

  ffi.Pointer<ffi.Char> keyname(
    int arg0,
  ) {
    return _keyname(
      arg0,
    );
  }

  late final _keynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'keyname');
  late final _keyname =
      _keynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> keyname_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _keyname_sp(
      arg0,
      arg1,
    );
  }

  late final _keyname_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SCREEN>, ffi.Int)>>('keyname_sp');
  late final _keyname_sp = _keyname_spPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>, int)>();

  int keyok(
    int arg0,
    bool arg1,
  ) {
    return _keyok(
      arg0,
      arg1,
    );
  }

  late final _keyokPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Bool)>>('keyok');
  late final _keyok = _keyokPtr.asFunction<int Function(int, bool)>();

  int keyok_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    bool arg2,
  ) {
    return _keyok_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _keyok_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Bool)>>('keyok_sp');
  late final _keyok_sp =
      _keyok_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int, bool)>();

  int keypad(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _keypad(
      arg0,
      arg1,
    );
  }

  late final _keypadPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'keypad');
  late final _keypad =
      _keypadPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  int killchar() {
    return _killchar();
  }

  late final _killcharPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function()>>('killchar');
  late final _killchar = _killcharPtr.asFunction<int Function()>();

  int killchar_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _killchar_sp(
      arg0,
    );
  }

  late final _killchar_spPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Pointer<SCREEN>)>>(
          'killchar_sp');
  late final _killchar_sp =
      _killchar_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int leaveok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _leaveok(
      arg0,
      arg1,
    );
  }

  late final _leaveokPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'leaveok');
  late final _leaveok =
      _leaveokPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  ffi.Pointer<ffi.Char> longname() {
    return _longname();
  }

  late final _longnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('longname');
  late final _longname =
      _longnamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> longname_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _longname_sp(
      arg0,
    );
  }

  late final _longname_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>)>>('longname_sp');
  late final _longname_sp = _longname_spPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>)>();

  /// other non-XSI functions
  int mcprint(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mcprint(
      arg0,
      arg1,
    );
  }

  late final _mcprintPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mcprint');
  late final _mcprint =
      _mcprintPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mcprint_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mcprint_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mcprint_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mcprint_sp');
  late final _mcprint_sp = _mcprint_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>, int)>();

  int meta(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _meta(
      arg0,
      arg1,
    );
  }

  late final _metaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'meta');
  late final _meta =
      _metaPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  bool mouse_trafo(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Int> arg1,
    bool arg2,
  ) {
    return _mouse_trafo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mouse_trafoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Bool)>>('mouse_trafo');
  late final _mouse_trafo = _mouse_trafoPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, bool)>();

  int mouseinterval(
    int arg0,
  ) {
    return _mouseinterval(
      arg0,
    );
  }

  late final _mouseintervalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('mouseinterval');
  late final _mouseinterval = _mouseintervalPtr.asFunction<int Function(int)>();

  int mouseinterval_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _mouseinterval_sp(
      arg0,
      arg1,
    );
  }

  late final _mouseinterval_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'mouseinterval_sp');
  late final _mouseinterval_sp =
      _mouseinterval_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int mousemask(
    int arg0,
    ffi.Pointer<mmask_t> arg1,
  ) {
    return _mousemask(
      arg0,
      arg1,
    );
  }

  late final _mousemaskPtr = _lookup<
          ffi.NativeFunction<mmask_t Function(mmask_t, ffi.Pointer<mmask_t>)>>(
      'mousemask');
  late final _mousemask =
      _mousemaskPtr.asFunction<int Function(int, ffi.Pointer<mmask_t>)>();

  int mousemask_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<mmask_t> arg2,
  ) {
    return _mousemask_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mousemask_spPtr = _lookup<
      ffi.NativeFunction<
          mmask_t Function(ffi.Pointer<SCREEN>, mmask_t,
              ffi.Pointer<mmask_t>)>>('mousemask_sp');
  late final _mousemask_sp = _mousemask_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<mmask_t>)>();

  int move(
    int arg0,
    int arg1,
  ) {
    return _move(
      arg0,
      arg1,
    );
  }

  late final _movePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('move');
  late final _move = _movePtr.asFunction<int Function(int, int)>();

  int mvaddch(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _mvaddch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvaddchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, chtype)>>(
          'mvaddch');
  late final _mvaddch = _mvaddchPtr.asFunction<int Function(int, int, int)>();

  int mvaddchnstr(
    int arg0,
    int arg1,
    ffi.Pointer<chtype> arg2,
    int arg3,
  ) {
    return _mvaddchnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvaddchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<chtype>, ffi.Int)>>('mvaddchnstr');
  late final _mvaddchnstr = _mvaddchnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<chtype>, int)>();

  int mvaddchstr(
    int arg0,
    int arg1,
    ffi.Pointer<chtype> arg2,
  ) {
    return _mvaddchstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvaddchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<chtype>)>>('mvaddchstr');
  late final _mvaddchstr =
      _mvaddchstrPtr.asFunction<int Function(int, int, ffi.Pointer<chtype>)>();

  int mvaddnstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _mvaddnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvaddnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mvaddnstr');
  late final _mvaddnstr = _mvaddnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvaddstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvaddstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvaddstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvaddstr');
  late final _mvaddstr =
      _mvaddstrPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvchgat(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Void> arg5,
  ) {
    return _mvchgat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _mvchgatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, attr_t, ffi.Short,
              ffi.Pointer<ffi.Void>)>>('mvchgat');
  late final _mvchgat = _mvchgatPtr.asFunction<
      int Function(int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int mvcur(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _mvcur(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvcurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('mvcur');
  late final _mvcur = _mvcurPtr.asFunction<int Function(int, int, int, int)>();

  int mvcur_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _mvcur_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvcur_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('mvcur_sp');
  late final _mvcur_sp = _mvcur_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int, int, int)>();

  int mvdelch(
    int arg0,
    int arg1,
  ) {
    return _mvdelch(
      arg0,
      arg1,
    );
  }

  late final _mvdelchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'mvdelch');
  late final _mvdelch = _mvdelchPtr.asFunction<int Function(int, int)>();

  int mvderwin(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _mvderwin(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvderwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('mvderwin');
  late final _mvderwin =
      _mvderwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int mvgetch(
    int arg0,
    int arg1,
  ) {
    return _mvgetch(
      arg0,
      arg1,
    );
  }

  late final _mvgetchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'mvgetch');
  late final _mvgetch = _mvgetchPtr.asFunction<int Function(int, int)>();

  int mvgetnstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _mvgetnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvgetnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mvgetnstr');
  late final _mvgetnstr = _mvgetnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvgetstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvgetstr');
  late final _mvgetstr =
      _mvgetstrPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvhline(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _mvhline(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvhlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, chtype, ffi.Int)>>('mvhline');
  late final _mvhline =
      _mvhlinePtr.asFunction<int Function(int, int, int, int)>();

  int mvinch(
    int arg0,
    int arg1,
  ) {
    return _mvinch(
      arg0,
      arg1,
    );
  }

  late final _mvinchPtr =
      _lookup<ffi.NativeFunction<chtype Function(ffi.Int, ffi.Int)>>('mvinch');
  late final _mvinch = _mvinchPtr.asFunction<int Function(int, int)>();

  int mvinchnstr(
    int arg0,
    int arg1,
    ffi.Pointer<chtype> arg2,
    int arg3,
  ) {
    return _mvinchnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvinchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<chtype>, ffi.Int)>>('mvinchnstr');
  late final _mvinchnstr = _mvinchnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<chtype>, int)>();

  int mvinchstr(
    int arg0,
    int arg1,
    ffi.Pointer<chtype> arg2,
  ) {
    return _mvinchstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvinchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<chtype>)>>('mvinchstr');
  late final _mvinchstr =
      _mvinchstrPtr.asFunction<int Function(int, int, ffi.Pointer<chtype>)>();

  int mvinnstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _mvinnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvinnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mvinnstr');
  late final _mvinnstr = _mvinnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvinsch(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _mvinsch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvinschPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, chtype)>>(
          'mvinsch');
  late final _mvinsch = _mvinschPtr.asFunction<int Function(int, int, int)>();

  int mvinsnstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _mvinsnstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvinsnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mvinsnstr');
  late final _mvinsnstr = _mvinsnstrPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvinsstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvinsstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvinsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvinsstr');
  late final _mvinsstr =
      _mvinsstrPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvinstr(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvinstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvinstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvinstr');
  late final _mvinstr =
      _mvinstrPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvprintw(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvprintw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvprintwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvprintw');
  late final _mvprintw =
      _mvprintwPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvscanw(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _mvscanw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvscanwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('mvscanw');
  late final _mvscanw =
      _mvscanwPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int mvvline(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _mvvline(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvvlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, chtype, ffi.Int)>>('mvvline');
  late final _mvvline =
      _mvvlinePtr.asFunction<int Function(int, int, int, int)>();

  int mvwaddch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _mvwaddch(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwaddchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, chtype)>>('mvwaddch');
  late final _mvwaddch = _mvwaddchPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, int, int, int)>();

  int mvwaddchnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<chtype> arg3,
    int arg4,
  ) {
    return _mvwaddchnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwaddchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<chtype>, ffi.Int)>>('mvwaddchnstr');
  late final _mvwaddchnstr = _mvwaddchnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<chtype>, int)>();

  int mvwaddchstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<chtype> arg3,
  ) {
    return _mvwaddchstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwaddchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<chtype>)>>('mvwaddchstr');
  late final _mvwaddchstr = _mvwaddchstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<chtype>)>();

  int mvwaddnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _mvwaddnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwaddnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('mvwaddnstr');
  late final _mvwaddnstr = _mvwaddnstrPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvwaddstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwaddstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwaddstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwaddstr');
  late final _mvwaddstr = _mvwaddstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwchgat(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Void> arg6,
  ) {
    return _mvwchgat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _mvwchgatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, ffi.Int,
              attr_t, ffi.Short, ffi.Pointer<ffi.Void>)>>('mvwchgat');
  late final _mvwchgat = _mvwchgatPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  int mvwdelch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _mvwdelch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvwdelchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('mvwdelch');
  late final _mvwdelch =
      _mvwdelchPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int mvwgetch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _mvwgetch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvwgetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('mvwgetch');
  late final _mvwgetch =
      _mvwgetchPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int mvwgetnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _mvwgetnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwgetnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('mvwgetnstr');
  late final _mvwgetnstr = _mvwgetnstrPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvwgetstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwgetstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwgetstr');
  late final _mvwgetstr = _mvwgetstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwhline(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _mvwhline(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwhlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, chtype,
              ffi.Int)>>('mvwhline');
  late final _mvwhline = _mvwhlinePtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, int, int, int, int)>();

  int mvwin(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _mvwin(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('mvwin');
  late final _mvwin =
      _mvwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int mvwinch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _mvwinch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mvwinchPtr = _lookup<
      ffi.NativeFunction<
          chtype Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('mvwinch');
  late final _mvwinch =
      _mvwinchPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int mvwinchnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<chtype> arg3,
    int arg4,
  ) {
    return _mvwinchnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwinchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<chtype>, ffi.Int)>>('mvwinchnstr');
  late final _mvwinchnstr = _mvwinchnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<chtype>, int)>();

  int mvwinchstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<chtype> arg3,
  ) {
    return _mvwinchstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwinchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<chtype>)>>('mvwinchstr');
  late final _mvwinchstr = _mvwinchstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<chtype>)>();

  int mvwinnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _mvwinnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwinnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('mvwinnstr');
  late final _mvwinnstr = _mvwinnstrPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvwinsch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _mvwinsch(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwinschPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, chtype)>>('mvwinsch');
  late final _mvwinsch = _mvwinschPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, int, int, int)>();

  int mvwinsnstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _mvwinsnstr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwinsnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('mvwinsnstr');
  late final _mvwinsnstr = _mvwinsnstrPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int mvwinsstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwinsstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwinsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwinsstr');
  late final _mvwinsstr = _mvwinsstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwinstr(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwinstr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwinstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwinstr');
  late final _mvwinstr = _mvwinstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwprintw(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwprintw(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwprintwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwprintw');
  late final _mvwprintw = _mvwprintwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwscanw(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _mvwscanw(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _mvwscanwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('mvwscanw');
  late final _mvwscanw = _mvwscanwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Char>)>();

  int mvwvline(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _mvwvline(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _mvwvlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, chtype,
              ffi.Int)>>('mvwvline');
  late final _mvwvline = _mvwvlinePtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, int, int, int, int)>();

  int napms(
    int arg0,
  ) {
    return _napms(
      arg0,
    );
  }

  late final _napmsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('napms');
  late final _napms = _napmsPtr.asFunction<int Function(int)>();

  int napms_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _napms_sp(
      arg0,
      arg1,
    );
  }

  late final _napms_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'napms_sp');
  late final _napms_sp =
      _napms_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  ffi.Pointer<SCREEN> new_prescr() {
    return _new_prescr();
  }

  late final _new_prescrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SCREEN> Function()>>('new_prescr');
  late final _new_prescr =
      _new_prescrPtr.asFunction<ffi.Pointer<SCREEN> Function()>();

  ffi.Pointer<WINDOW> newpad(
    int arg0,
    int arg1,
  ) {
    return _newpad(
      arg0,
      arg1,
    );
  }

  late final _newpadPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<WINDOW> Function(ffi.Int, ffi.Int)>>(
      'newpad');
  late final _newpad =
      _newpadPtr.asFunction<ffi.Pointer<WINDOW> Function(int, int)>();

  ffi.Pointer<WINDOW> newpad_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _newpad_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _newpad_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('newpad_sp');
  late final _newpad_sp = _newpad_spPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<SCREEN>, int, int)>();

  late final ffi.Pointer<ffi.Pointer<WINDOW>> _newscr =
      _lookup<ffi.Pointer<WINDOW>>('newscr');

  ffi.Pointer<WINDOW> get newscr => _newscr.value;

  set newscr(ffi.Pointer<WINDOW> value) => _newscr.value = value;

  ffi.Pointer<SCREEN> newterm(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _newterm(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _newtermPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SCREEN> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>,
              ffi.Pointer<FILE>)>>('newterm');
  late final _newterm = _newtermPtr.asFunction<
      ffi.Pointer<SCREEN> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>, ffi.Pointer<FILE>)>();

  ffi.Pointer<SCREEN> newterm_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
    ffi.Pointer<FILE> arg3,
  ) {
    return _newterm_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _newterm_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SCREEN> Function(
              ffi.Pointer<SCREEN>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>,
              ffi.Pointer<FILE>)>>('newterm_sp');
  late final _newterm_sp = _newterm_spPtr.asFunction<
      ffi.Pointer<SCREEN> Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>, ffi.Pointer<FILE>)>();

  ffi.Pointer<WINDOW> newwin(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _newwin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _newwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('newwin');
  late final _newwin =
      _newwinPtr.asFunction<ffi.Pointer<WINDOW> Function(int, int, int, int)>();

  ffi.Pointer<WINDOW> newwin_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _newwin_sp(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _newwin_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('newwin_sp');
  late final _newwin_sp = _newwin_spPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<SCREEN>, int, int, int, int)>();

  int nl() {
    return _nl();
  }

  late final _nlPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('nl');
  late final _nl = _nlPtr.asFunction<int Function()>();

  int nl_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _nl_sp(
      arg0,
    );
  }

  late final _nl_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'nl_sp');
  late final _nl_sp = _nl_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int nocbreak() {
    return _nocbreak();
  }

  late final _nocbreakPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('nocbreak');
  late final _nocbreak = _nocbreakPtr.asFunction<int Function()>();

  int nocbreak_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _nocbreak_sp(
      arg0,
    );
  }

  late final _nocbreak_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'nocbreak_sp');
  late final _nocbreak_sp =
      _nocbreak_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int nodelay(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _nodelay(
      arg0,
      arg1,
    );
  }

  late final _nodelayPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'nodelay');
  late final _nodelay =
      _nodelayPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  int noecho() {
    return _noecho();
  }

  late final _noechoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('noecho');
  late final _noecho = _noechoPtr.asFunction<int Function()>();

  int noecho_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _noecho_sp(
      arg0,
    );
  }

  late final _noecho_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'noecho_sp');
  late final _noecho_sp =
      _noecho_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  void nofilter() {
    return _nofilter();
  }

  late final _nofilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('nofilter');
  late final _nofilter = _nofilterPtr.asFunction<void Function()>();

  void nofilter_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _nofilter_sp(
      arg0,
    );
  }

  late final _nofilter_spPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'nofilter_sp');
  late final _nofilter_sp =
      _nofilter_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int nonl() {
    return _nonl();
  }

  late final _nonlPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('nonl');
  late final _nonl = _nonlPtr.asFunction<int Function()>();

  int nonl_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _nonl_sp(
      arg0,
    );
  }

  late final _nonl_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'nonl_sp');
  late final _nonl_sp =
      _nonl_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  void noqiflush() {
    return _noqiflush();
  }

  late final _noqiflushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('noqiflush');
  late final _noqiflush = _noqiflushPtr.asFunction<void Function()>();

  void noqiflush_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _noqiflush_sp(
      arg0,
    );
  }

  late final _noqiflush_spPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'noqiflush_sp');
  late final _noqiflush_sp =
      _noqiflush_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int noraw() {
    return _noraw();
  }

  late final _norawPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('noraw');
  late final _noraw = _norawPtr.asFunction<int Function()>();

  int noraw_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _noraw_sp(
      arg0,
    );
  }

  late final _noraw_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'noraw_sp');
  late final _noraw_sp =
      _noraw_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int notimeout(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _notimeout(
      arg0,
      arg1,
    );
  }

  late final _notimeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'notimeout');
  late final _notimeout =
      _notimeoutPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  int overlay(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<WINDOW> arg1,
  ) {
    return _overlay(
      arg0,
      arg1,
    );
  }

  late final _overlayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<WINDOW>)>>('overlay');
  late final _overlay = _overlayPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<WINDOW>)>();

  int overwrite(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<WINDOW> arg1,
  ) {
    return _overwrite(
      arg0,
      arg1,
    );
  }

  late final _overwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<WINDOW>)>>('overwrite');
  late final _overwrite = _overwritePtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<WINDOW>)>();

  int pair_content(
    int arg0,
    ffi.Pointer<ffi.Short> arg1,
    ffi.Pointer<ffi.Short> arg2,
  ) {
    return _pair_content(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pair_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Short, ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>)>>('pair_content');
  late final _pair_content = _pair_contentPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Short>)>();

  int pair_content_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<ffi.Short> arg2,
    ffi.Pointer<ffi.Short> arg3,
  ) {
    return _pair_content_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pair_content_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>,
              ffi.Short,
              ffi.Pointer<ffi.Short>,
              ffi.Pointer<ffi.Short>)>>('pair_content_sp');
  late final _pair_content_sp = _pair_content_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<ffi.Short>,
          ffi.Pointer<ffi.Short>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pechochar(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _pechochar(
      arg0,
      arg1,
    );
  }

  late final _pechocharPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, chtype)>>(
      'pechochar');
  late final _pechochar =
      _pechocharPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int pnoutrefresh(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _pnoutrefresh(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _pnoutrefreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('pnoutrefresh');
  late final _pnoutrefresh = _pnoutrefreshPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, int, int, int, int)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int prefresh(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _prefresh(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _prefreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('prefresh');
  late final _prefresh = _prefreshPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, int, int, int, int)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int printw(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printw(
      arg0,
    );
  }

  late final _printwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printw');
  late final _printw =
      _printwPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int putp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putp(
      arg0,
    );
  }

  late final _putpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putp');
  late final _putp = _putpPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwin(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putwin(
      arg0,
      arg1,
    );
  }

  late final _putwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<FILE>)>>('putwin');
  late final _putwin = _putwinPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<FILE>)>();

  void qiflush() {
    return _qiflush();
  }

  late final _qiflushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('qiflush');
  late final _qiflush = _qiflushPtr.asFunction<void Function()>();

  void qiflush_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _qiflush_sp(
      arg0,
    );
  }

  late final _qiflush_spPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'qiflush_sp');
  late final _qiflush_sp =
      _qiflush_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int raw() {
    return _raw();
  }

  late final _rawPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('raw');
  late final _raw = _rawPtr.asFunction<int Function()>();

  int raw_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _raw_sp(
      arg0,
    );
  }

  late final _raw_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'raw_sp');
  late final _raw_sp =
      _raw_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int redrawwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _redrawwin(
      arg0,
    );
  }

  late final _redrawwinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'redrawwin');
  late final _redrawwin =
      _redrawwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int refresh() {
    return _refresh();
  }

  late final _refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('refresh');
  late final _refresh = _refreshPtr.asFunction<int Function()>();

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void reset_color_pairs() {
    return _reset_color_pairs();
  }

  late final _reset_color_pairsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('reset_color_pairs');
  late final _reset_color_pairs =
      _reset_color_pairsPtr.asFunction<void Function()>();

  void reset_color_pairs_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _reset_color_pairs_sp(
      arg0,
    );
  }

  late final _reset_color_pairs_spPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>)>>(
          'reset_color_pairs_sp');
  late final _reset_color_pairs_sp =
      _reset_color_pairs_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>)>();

  int reset_prog_mode() {
    return _reset_prog_mode();
  }

  late final _reset_prog_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('reset_prog_mode');
  late final _reset_prog_mode =
      _reset_prog_modePtr.asFunction<int Function()>();

  int reset_prog_mode_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _reset_prog_mode_sp(
      arg0,
    );
  }

  late final _reset_prog_mode_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'reset_prog_mode_sp');
  late final _reset_prog_mode_sp =
      _reset_prog_mode_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int reset_shell_mode() {
    return _reset_shell_mode();
  }

  late final _reset_shell_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('reset_shell_mode');
  late final _reset_shell_mode =
      _reset_shell_modePtr.asFunction<int Function()>();

  int reset_shell_mode_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _reset_shell_mode_sp(
      arg0,
    );
  }

  late final _reset_shell_mode_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'reset_shell_mode_sp');
  late final _reset_shell_mode_sp =
      _reset_shell_mode_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int resetty() {
    return _resetty();
  }

  late final _resettyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('resetty');
  late final _resetty = _resettyPtr.asFunction<int Function()>();

  int resetty_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _resetty_sp(
      arg0,
    );
  }

  late final _resetty_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'resetty_sp');
  late final _resetty_sp =
      _resetty_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int resize_term(
    int arg0,
    int arg1,
  ) {
    return _resize_term(
      arg0,
      arg1,
    );
  }

  late final _resize_termPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'resize_term');
  late final _resize_term =
      _resize_termPtr.asFunction<int Function(int, int)>();

  int resize_term_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _resize_term_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _resize_term_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('resize_term_sp');
  late final _resize_term_sp = _resize_term_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int)>();

  int resizeterm(
    int arg0,
    int arg1,
  ) {
    return _resizeterm(
      arg0,
      arg1,
    );
  }

  late final _resizetermPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'resizeterm');
  late final _resizeterm = _resizetermPtr.asFunction<int Function(int, int)>();

  int resizeterm_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
  ) {
    return _resizeterm_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _resizeterm_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Int, ffi.Int)>>('resizeterm_sp');
  late final _resizeterm_sp = _resizeterm_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, int)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ripoffline(
    int arg0,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>
        arg1,
  ) {
    return _ripoffline(
      arg0,
      arg1,
    );
  }

  late final _ripofflinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<WINDOW>, ffi.Int)>>)>>('ripoffline');
  late final _ripoffline = _ripofflinePtr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>)>();

  int ripoffline_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>
        arg2,
  ) {
    return _ripoffline_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ripoffline_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<WINDOW>, ffi.Int)>>)>>('ripoffline_sp');
  late final _ripoffline_sp = _ripoffline_spPtr.asFunction<
      int Function(
          ffi.Pointer<SCREEN>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>)>();

  int savetty() {
    return _savetty();
  }

  late final _savettyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('savetty');
  late final _savetty = _savettyPtr.asFunction<int Function()>();

  int savetty_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _savetty_sp(
      arg0,
    );
  }

  late final _savetty_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'savetty_sp');
  late final _savetty_sp =
      _savetty_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scanw(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanw(
      arg0,
    );
  }

  late final _scanwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanw');
  late final _scanw =
      _scanwPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scr_dump(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scr_dump(
      arg0,
    );
  }

  late final _scr_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scr_dump');
  late final _scr_dump =
      _scr_dumpPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scr_init(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scr_init(
      arg0,
    );
  }

  late final _scr_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scr_init');
  late final _scr_init =
      _scr_initPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scr_init_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _scr_init_sp(
      arg0,
      arg1,
    );
  }

  late final _scr_init_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>>('scr_init_sp');
  late final _scr_init_sp = _scr_init_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>();

  int scr_restore(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scr_restore(
      arg0,
    );
  }

  late final _scr_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scr_restore');
  late final _scr_restore =
      _scr_restorePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scr_restore_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _scr_restore_sp(
      arg0,
      arg1,
    );
  }

  late final _scr_restore_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>>('scr_restore_sp');
  late final _scr_restore_sp = _scr_restore_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>();

  int scr_set(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scr_set(
      arg0,
    );
  }

  late final _scr_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scr_set');
  late final _scr_set =
      _scr_setPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int scr_set_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _scr_set_sp(
      arg0,
      arg1,
    );
  }

  late final _scr_set_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>>('scr_set_sp');
  late final _scr_set_sp = _scr_set_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Char>)>();

  int scrl(
    int arg0,
  ) {
    return _scrl(
      arg0,
    );
  }

  late final _scrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('scrl');
  late final _scrl = _scrlPtr.asFunction<int Function(int)>();

  int scroll(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _scroll(
      arg0,
    );
  }

  late final _scrollPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'scroll');
  late final _scroll =
      _scrollPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int scrollok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _scrollok(
      arg0,
      arg1,
    );
  }

  late final _scrollokPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'scrollok');
  late final _scrollok =
      _scrollokPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  int set_escdelay(
    int arg0,
  ) {
    return _set_escdelay(
      arg0,
    );
  }

  late final _set_escdelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('set_escdelay');
  late final _set_escdelay = _set_escdelayPtr.asFunction<int Function(int)>();

  int set_escdelay_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _set_escdelay_sp(
      arg0,
      arg1,
    );
  }

  late final _set_escdelay_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'set_escdelay_sp');
  late final _set_escdelay_sp =
      _set_escdelay_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int set_tabsize(
    int arg0,
  ) {
    return _set_tabsize(
      arg0,
    );
  }

  late final _set_tabsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('set_tabsize');
  late final _set_tabsize = _set_tabsizePtr.asFunction<int Function(int)>();

  int set_tabsize_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _set_tabsize_sp(
      arg0,
      arg1,
    );
  }

  late final _set_tabsize_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'set_tabsize_sp');
  late final _set_tabsize_sp =
      _set_tabsize_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  ffi.Pointer<SCREEN> set_term(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _set_term(
      arg0,
    );
  }

  late final _set_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SCREEN> Function(ffi.Pointer<SCREEN>)>>('set_term');
  late final _set_term = _set_termPtr
      .asFunction<ffi.Pointer<SCREEN> Function(ffi.Pointer<SCREEN>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int setscrreg(
    int arg0,
    int arg1,
  ) {
    return _setscrreg(
      arg0,
      arg1,
    );
  }

  late final _setscrregPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'setscrreg');
  late final _setscrreg = _setscrregPtr.asFunction<int Function(int, int)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int slk_attr() {
    return _slk_attr();
  }

  late final _slk_attrPtr =
      _lookup<ffi.NativeFunction<attr_t Function()>>('slk_attr');
  late final _slk_attr = _slk_attrPtr.asFunction<int Function()>();

  int slk_attr_off(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _slk_attr_off(
      arg0,
      arg1,
    );
  }

  late final _slk_attr_offPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(attr_t, ffi.Pointer<ffi.Void>)>>(
      'slk_attr_off');
  late final _slk_attr_off =
      _slk_attr_offPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int slk_attr_on(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _slk_attr_on(
      arg0,
      arg1,
    );
  }

  late final _slk_attr_onPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(attr_t, ffi.Pointer<ffi.Void>)>>(
      'slk_attr_on');
  late final _slk_attr_on =
      _slk_attr_onPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int slk_attr_set(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _slk_attr_set(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _slk_attr_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              attr_t, ffi.Short, ffi.Pointer<ffi.Void>)>>('slk_attr_set');
  late final _slk_attr_set = _slk_attr_setPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int slk_attr_set_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _slk_attr_set_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _slk_attr_set_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, attr_t, ffi.Short,
              ffi.Pointer<ffi.Void>)>>('slk_attr_set_sp');
  late final _slk_attr_set_sp = _slk_attr_set_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, int, int, ffi.Pointer<ffi.Void>)>();

  int slk_attr_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_attr_sp(
      arg0,
    );
  }

  late final _slk_attr_spPtr =
      _lookup<ffi.NativeFunction<attr_t Function(ffi.Pointer<SCREEN>)>>(
          'slk_attr_sp');
  late final _slk_attr_sp =
      _slk_attr_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int slk_attroff(
    int arg0,
  ) {
    return _slk_attroff(
      arg0,
    );
  }

  late final _slk_attroffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('slk_attroff');
  late final _slk_attroff = _slk_attroffPtr.asFunction<int Function(int)>();

  int slk_attroff_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_attroff_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_attroff_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, chtype)>>(
      'slk_attroff_sp');
  late final _slk_attroff_sp =
      _slk_attroff_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int slk_attron(
    int arg0,
  ) {
    return _slk_attron(
      arg0,
    );
  }

  late final _slk_attronPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('slk_attron');
  late final _slk_attron = _slk_attronPtr.asFunction<int Function(int)>();

  int slk_attron_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_attron_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_attron_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, chtype)>>(
      'slk_attron_sp');
  late final _slk_attron_sp =
      _slk_attron_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int slk_attrset(
    int arg0,
  ) {
    return _slk_attrset(
      arg0,
    );
  }

  late final _slk_attrsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('slk_attrset');
  late final _slk_attrset = _slk_attrsetPtr.asFunction<int Function(int)>();

  int slk_attrset_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_attrset_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_attrset_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, chtype)>>(
      'slk_attrset_sp');
  late final _slk_attrset_sp =
      _slk_attrset_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int slk_clear() {
    return _slk_clear();
  }

  late final _slk_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('slk_clear');
  late final _slk_clear = _slk_clearPtr.asFunction<int Function()>();

  int slk_clear_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_clear_sp(
      arg0,
    );
  }

  late final _slk_clear_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'slk_clear_sp');
  late final _slk_clear_sp =
      _slk_clear_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int slk_color(
    int arg0,
  ) {
    return _slk_color(
      arg0,
    );
  }

  late final _slk_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Short)>>('slk_color');
  late final _slk_color = _slk_colorPtr.asFunction<int Function(int)>();

  int slk_color_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_color_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_color_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Short)>>(
      'slk_color_sp');
  late final _slk_color_sp =
      _slk_color_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int slk_init(
    int arg0,
  ) {
    return _slk_init(
      arg0,
    );
  }

  late final _slk_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('slk_init');
  late final _slk_init = _slk_initPtr.asFunction<int Function(int)>();

  int slk_init_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_init_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_init_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'slk_init_sp');
  late final _slk_init_sp =
      _slk_init_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  ffi.Pointer<ffi.Char> slk_label(
    int arg0,
  ) {
    return _slk_label(
      arg0,
    );
  }

  late final _slk_labelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'slk_label');
  late final _slk_label =
      _slk_labelPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> slk_label_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _slk_label_sp(
      arg0,
      arg1,
    );
  }

  late final _slk_label_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SCREEN>, ffi.Int)>>('slk_label_sp');
  late final _slk_label_sp = _slk_label_spPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>, int)>();

  int slk_noutrefresh() {
    return _slk_noutrefresh();
  }

  late final _slk_noutrefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('slk_noutrefresh');
  late final _slk_noutrefresh =
      _slk_noutrefreshPtr.asFunction<int Function()>();

  int slk_noutrefresh_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_noutrefresh_sp(
      arg0,
    );
  }

  late final _slk_noutrefresh_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'slk_noutrefresh_sp');
  late final _slk_noutrefresh_sp =
      _slk_noutrefresh_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int slk_refresh() {
    return _slk_refresh();
  }

  late final _slk_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('slk_refresh');
  late final _slk_refresh = _slk_refreshPtr.asFunction<int Function()>();

  int slk_refresh_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_refresh_sp(
      arg0,
    );
  }

  late final _slk_refresh_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'slk_refresh_sp');
  late final _slk_refresh_sp =
      _slk_refresh_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int slk_restore() {
    return _slk_restore();
  }

  late final _slk_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('slk_restore');
  late final _slk_restore = _slk_restorePtr.asFunction<int Function()>();

  int slk_restore_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_restore_sp(
      arg0,
    );
  }

  late final _slk_restore_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'slk_restore_sp');
  late final _slk_restore_sp =
      _slk_restore_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int slk_set(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _slk_set(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _slk_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('slk_set');
  late final _slk_set =
      _slk_setPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int slk_set_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _slk_set_sp(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _slk_set_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('slk_set_sp');
  late final _slk_set_sp = _slk_set_spPtr.asFunction<
      int Function(ffi.Pointer<SCREEN>, int, ffi.Pointer<ffi.Char>, int)>();

  int slk_touch() {
    return _slk_touch();
  }

  late final _slk_touchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('slk_touch');
  late final _slk_touch = _slk_touchPtr.asFunction<int Function()>();

  int slk_touch_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _slk_touch_sp(
      arg0,
    );
  }

  late final _slk_touch_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'slk_touch_sp');
  late final _slk_touch_sp =
      _slk_touch_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int standend() {
    return _standend();
  }

  late final _standendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('standend');
  late final _standend = _standendPtr.asFunction<int Function()>();

  int standout() {
    return _standout();
  }

  late final _standoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('standout');
  late final _standout = _standoutPtr.asFunction<int Function()>();

  int start_color() {
    return _start_color();
  }

  late final _start_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('start_color');
  late final _start_color = _start_colorPtr.asFunction<int Function()>();

  int start_color_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _start_color_sp(
      arg0,
    );
  }

  late final _start_color_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'start_color_sp');
  late final _start_color_sp =
      _start_color_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<WINDOW>> _stdscr =
      _lookup<ffi.Pointer<WINDOW>>('stdscr');

  ffi.Pointer<WINDOW> get stdscr => _stdscr.value;

  set stdscr(ffi.Pointer<WINDOW> value) => _stdscr.value = value;

  ffi.Pointer<WINDOW> subpad(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _subpad(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _subpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('subpad');
  late final _subpad = _subpadPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, int, int, int, int)>();

  ffi.Pointer<WINDOW> subwin(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _subwin(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _subwinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('subwin');
  late final _subwin = _subwinPtr.asFunction<
      ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>, int, int, int, int)>();

  int syncok(
    ffi.Pointer<WINDOW> arg0,
    bool arg1,
  ) {
    return _syncok(
      arg0,
      arg1,
    );
  }

  late final _syncokPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Bool)>>(
      'syncok');
  late final _syncok =
      _syncokPtr.asFunction<int Function(ffi.Pointer<WINDOW>, bool)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int termattrs() {
    return _termattrs();
  }

  late final _termattrsPtr =
      _lookup<ffi.NativeFunction<chtype Function()>>('termattrs');
  late final _termattrs = _termattrsPtr.asFunction<int Function()>();

  int termattrs_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _termattrs_sp(
      arg0,
    );
  }

  late final _termattrs_spPtr =
      _lookup<ffi.NativeFunction<chtype Function(ffi.Pointer<SCREEN>)>>(
          'termattrs_sp');
  late final _termattrs_sp =
      _termattrs_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  ffi.Pointer<ffi.Char> termname() {
    return _termname();
  }

  late final _termnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('termname');
  late final _termname =
      _termnamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> termname_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _termname_sp(
      arg0,
    );
  }

  late final _termname_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>)>>('termname_sp');
  late final _termname_sp = _termname_spPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>)>();

  /// These are also declared in <term.h>:
  int tigetflag(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tigetflag(
      arg0,
    );
  }

  late final _tigetflagPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'tigetflag');
  late final _tigetflag =
      _tigetflagPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tigetnum(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tigetnum(
      arg0,
    );
  }

  late final _tigetnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'tigetnum');
  late final _tigetnum =
      _tigetnumPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tigetstr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tigetstr(
      arg0,
    );
  }

  late final _tigetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tigetstr');
  late final _tigetstr = _tigetstrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void timeout(
    int arg0,
  ) {
    return _timeout(
      arg0,
    );
  }

  late final _timeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('timeout');
  late final _timeout = _timeoutPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> tiparm(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tiparm(
      arg0,
    );
  }

  late final _tiparmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tiparm');
  late final _tiparm = _tiparmPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int touchline(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _touchline(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _touchlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('touchline');
  late final _touchline =
      _touchlinePtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int touchwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _touchwin(
      arg0,
    );
  }

  late final _touchwinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'touchwin');
  late final _touchwin =
      _touchwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  ffi.Pointer<ffi.Char> tparm(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tparm(
      arg0,
    );
  }

  late final _tparmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tparm');
  late final _tparm = _tparmPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void trace(
    int arg0,
  ) {
    return _trace(
      arg0,
    );
  }

  late final _tracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('trace');
  late final _trace = _tracePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _ttytype =
      _lookup<ffi.Pointer<ffi.Char>>('ttytype');

  ffi.Pointer<ffi.Char> get ttytype => _ttytype.value;

  set ttytype(ffi.Pointer<ffi.Char> value) => _ttytype.value = value;

  int typeahead(
    int arg0,
  ) {
    return _typeahead(
      arg0,
    );
  }

  late final _typeaheadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('typeahead');
  late final _typeahead = _typeaheadPtr.asFunction<int Function(int)>();

  int typeahead_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _typeahead_sp(
      arg0,
      arg1,
    );
  }

  late final _typeahead_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'typeahead_sp');
  late final _typeahead_sp =
      _typeahead_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  ffi.Pointer<ffi.Char> unctrl(
    int arg0,
  ) {
    return _unctrl(
      arg0,
    );
  }

  late final _unctrlPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(chtype)>>(
          'unctrl');
  late final _unctrl =
      _unctrlPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> unctrl_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _unctrl_sp(
      arg0,
      arg1,
    );
  }

  late final _unctrl_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SCREEN>, chtype)>>('unctrl_sp');
  late final _unctrl_sp = _unctrl_spPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SCREEN>, int)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int ungetch(
    int arg0,
  ) {
    return _ungetch(
      arg0,
    );
  }

  late final _ungetchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ungetch');
  late final _ungetch = _ungetchPtr.asFunction<int Function(int)>();

  int ungetch_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _ungetch_sp(
      arg0,
      arg1,
    );
  }

  late final _ungetch_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'ungetch_sp');
  late final _ungetch_sp =
      _ungetch_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int ungetmouse(
    ffi.Pointer<MEVENT> arg0,
  ) {
    return _ungetmouse(
      arg0,
    );
  }

  late final _ungetmousePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MEVENT>)>>(
          'ungetmouse');
  late final _ungetmouse =
      _ungetmousePtr.asFunction<int Function(ffi.Pointer<MEVENT>)>();

  int ungetmouse_sp(
    ffi.Pointer<SCREEN> arg0,
    ffi.Pointer<MEVENT> arg1,
  ) {
    return _ungetmouse_sp(
      arg0,
      arg1,
    );
  }

  late final _ungetmouse_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, ffi.Pointer<MEVENT>)>>('ungetmouse_sp');
  late final _ungetmouse_sp = _ungetmouse_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, ffi.Pointer<MEVENT>)>();

  int untouchwin(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _untouchwin(
      arg0,
    );
  }

  late final _untouchwinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'untouchwin');
  late final _untouchwin =
      _untouchwinPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int use_default_colors() {
    return _use_default_colors();
  }

  late final _use_default_colorsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('use_default_colors');
  late final _use_default_colors =
      _use_default_colorsPtr.asFunction<int Function()>();

  int use_default_colors_sp(
    ffi.Pointer<SCREEN> arg0,
  ) {
    return _use_default_colors_sp(
      arg0,
    );
  }

  late final _use_default_colors_spPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>)>>(
          'use_default_colors_sp');
  late final _use_default_colors_sp =
      _use_default_colors_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>)>();

  void use_env(
    bool arg0,
  ) {
    return _use_env(
      arg0,
    );
  }

  late final _use_envPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>('use_env');
  late final _use_env = _use_envPtr.asFunction<void Function(bool)>();

  void use_env_sp(
    ffi.Pointer<SCREEN> arg0,
    bool arg1,
  ) {
    return _use_env_sp(
      arg0,
      arg1,
    );
  }

  late final _use_env_spPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>, ffi.Bool)>>(
      'use_env_sp');
  late final _use_env_sp =
      _use_env_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>, bool)>();

  int use_extended_names(
    bool arg0,
  ) {
    return _use_extended_names(
      arg0,
    );
  }

  late final _use_extended_namesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'use_extended_names');
  late final _use_extended_names =
      _use_extended_namesPtr.asFunction<int Function(bool)>();

  int use_legacy_coding(
    int arg0,
  ) {
    return _use_legacy_coding(
      arg0,
    );
  }

  late final _use_legacy_codingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'use_legacy_coding');
  late final _use_legacy_coding =
      _use_legacy_codingPtr.asFunction<int Function(int)>();

  int use_legacy_coding_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _use_legacy_coding_sp(
      arg0,
      arg1,
    );
  }

  late final _use_legacy_coding_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>(
      'use_legacy_coding_sp');
  late final _use_legacy_coding_sp = _use_legacy_coding_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int use_screen(
    ffi.Pointer<SCREEN> arg0,
    NCURSES_SCREEN_CB arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _use_screen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _use_screenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SCREEN>, NCURSES_SCREEN_CB,
              ffi.Pointer<ffi.Void>)>>('use_screen');
  late final _use_screen = _use_screenPtr.asFunction<
      int Function(
          ffi.Pointer<SCREEN>, NCURSES_SCREEN_CB, ffi.Pointer<ffi.Void>)>();

  void use_tioctl(
    bool arg0,
  ) {
    return _use_tioctl(
      arg0,
    );
  }

  late final _use_tioctlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>('use_tioctl');
  late final _use_tioctl = _use_tioctlPtr.asFunction<void Function(bool)>();

  void use_tioctl_sp(
    ffi.Pointer<SCREEN> arg0,
    bool arg1,
  ) {
    return _use_tioctl_sp(
      arg0,
      arg1,
    );
  }

  late final _use_tioctl_spPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCREEN>, ffi.Bool)>>(
      'use_tioctl_sp');
  late final _use_tioctl_sp =
      _use_tioctl_spPtr.asFunction<void Function(ffi.Pointer<SCREEN>, bool)>();

  int use_window(
    ffi.Pointer<WINDOW> arg0,
    NCURSES_WINDOW_CB arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _use_window(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _use_windowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, NCURSES_WINDOW_CB,
              ffi.Pointer<ffi.Void>)>>('use_window');
  late final _use_window = _use_windowPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, NCURSES_WINDOW_CB, ffi.Pointer<ffi.Void>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vidattr(
    int arg0,
  ) {
    return _vidattr(
      arg0,
    );
  }

  late final _vidattrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype)>>('vidattr');
  late final _vidattr = _vidattrPtr.asFunction<int Function(int)>();

  int vidattr_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
  ) {
    return _vidattr_sp(
      arg0,
      arg1,
    );
  }

  late final _vidattr_spPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, chtype)>>(
      'vidattr_sp');
  late final _vidattr_sp =
      _vidattr_spPtr.asFunction<int Function(ffi.Pointer<SCREEN>, int)>();

  int vidputs(
    int arg0,
    NCURSES_OUTC arg1,
  ) {
    return _vidputs(
      arg0,
      arg1,
    );
  }

  late final _vidputsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype, NCURSES_OUTC)>>(
          'vidputs');
  late final _vidputs =
      _vidputsPtr.asFunction<int Function(int, NCURSES_OUTC)>();

  int vidputs_sp(
    ffi.Pointer<SCREEN> arg0,
    int arg1,
    NCURSES_OUTC_sp arg2,
  ) {
    return _vidputs_sp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vidputs_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SCREEN>, chtype, NCURSES_OUTC_sp)>>('vidputs_sp');
  late final _vidputs_sp = _vidputs_spPtr
      .asFunction<int Function(ffi.Pointer<SCREEN>, int, NCURSES_OUTC_sp)>();

  int vline(
    int arg0,
    int arg1,
  ) {
    return _vline(
      arg0,
      arg1,
    );
  }

  late final _vlinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(chtype, ffi.Int)>>('vline');
  late final _vline = _vlinePtr.asFunction<int Function(int, int)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vw_printw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vw_printw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vw_printwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vw_printw');
  late final _vw_printw = _vw_printwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vw_scanw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vw_scanw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vw_scanwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vw_scanw');
  late final _vw_scanw = _vw_scanwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vwprintw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vwprintw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vwprintwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vwprintw');
  late final _vwprintw = _vwprintwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vwscanw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vwscanw(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vwscanwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vwscanw');
  late final _vwscanw = _vwscanwPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int waddch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _waddch(
      arg0,
      arg1,
    );
  }

  late final _waddchPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, chtype)>>(
      'waddch');
  late final _waddch =
      _waddchPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int waddchnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<chtype> arg1,
    int arg2,
  ) {
    return _waddchnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waddchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<chtype>,
              ffi.Int)>>('waddchnstr');
  late final _waddchnstr = _waddchnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<chtype>, int)>();

  int waddchstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<chtype> arg1,
  ) {
    return _waddchstr(
      arg0,
      arg1,
    );
  }

  late final _waddchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<chtype>)>>('waddchstr');
  late final _waddchstr = _waddchstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<chtype>)>();

  int waddnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _waddnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waddnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('waddnstr');
  late final _waddnstr = _waddnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>, int)>();

  int waddstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _waddstr(
      arg0,
      arg1,
    );
  }

  late final _waddstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('waddstr');
  late final _waddstr = _waddstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  int wattr_get(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<attr_t> arg1,
    ffi.Pointer<ffi.Short> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _wattr_get(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wattr_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<attr_t>,
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Void>)>>('wattr_get');
  late final _wattr_get = _wattr_getPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<attr_t>,
          ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Void>)>();

  int wattr_off(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _wattr_off(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wattr_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, attr_t,
              ffi.Pointer<ffi.Void>)>>('wattr_off');
  late final _wattr_off = _wattr_offPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, ffi.Pointer<ffi.Void>)>();

  int wattr_on(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _wattr_on(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wattr_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, attr_t, ffi.Pointer<ffi.Void>)>>('wattr_on');
  late final _wattr_on = _wattr_onPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, ffi.Pointer<ffi.Void>)>();

  int wattr_set(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _wattr_set(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wattr_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, attr_t, ffi.Short,
              ffi.Pointer<ffi.Void>)>>('wattr_set');
  late final _wattr_set = _wattr_setPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, int, ffi.Pointer<ffi.Void>)>();

  int wattroff(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wattroff(
      arg0,
      arg1,
    );
  }

  late final _wattroffPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'wattroff');
  late final _wattroff =
      _wattroffPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int wattron(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wattron(
      arg0,
      arg1,
    );
  }

  late final _wattronPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'wattron');
  late final _wattron =
      _wattronPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int wattrset(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wattrset(
      arg0,
      arg1,
    );
  }

  late final _wattrsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'wattrset');
  late final _wattrset =
      _wattrsetPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int wbkgd(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wbkgd(
      arg0,
      arg1,
    );
  }

  late final _wbkgdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, chtype)>>(
      'wbkgd');
  late final _wbkgd =
      _wbkgdPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  void wbkgdset(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wbkgdset(
      arg0,
      arg1,
    );
  }

  late final _wbkgdsetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>, chtype)>>(
      'wbkgdset');
  late final _wbkgdset =
      _wbkgdsetPtr.asFunction<void Function(ffi.Pointer<WINDOW>, int)>();

  int wborder(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    return _wborder(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _wborderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, chtype, chtype, chtype, chtype,
              chtype, chtype, chtype, chtype)>>('wborder');
  late final _wborder = _wborderPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, int, int, int, int, int, int)>();

  int wchgat(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) {
    return _wchgat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _wchgatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, attr_t, ffi.Short,
              ffi.Pointer<ffi.Void>)>>('wchgat');
  late final _wchgat = _wchgatPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, int, int, int, ffi.Pointer<ffi.Void>)>();

  int wclear(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wclear(
      arg0,
    );
  }

  late final _wclearPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wclear');
  late final _wclear =
      _wclearPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wclrtobot(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wclrtobot(
      arg0,
    );
  }

  late final _wclrtobotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wclrtobot');
  late final _wclrtobot =
      _wclrtobotPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wclrtoeol(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wclrtoeol(
      arg0,
    );
  }

  late final _wclrtoeolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wclrtoeol');
  late final _wclrtoeol =
      _wclrtoeolPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wcolor_set(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _wcolor_set(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcolor_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Short,
              ffi.Pointer<ffi.Void>)>>('wcolor_set');
  late final _wcolor_set = _wcolor_setPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, int, ffi.Pointer<ffi.Void>)>();

  void wcursyncup(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wcursyncup(
      arg0,
    );
  }

  late final _wcursyncupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>)>>(
          'wcursyncup');
  late final _wcursyncup =
      _wcursyncupPtr.asFunction<void Function(ffi.Pointer<WINDOW>)>();

  int wdelch(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wdelch(
      arg0,
    );
  }

  late final _wdelchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wdelch');
  late final _wdelch =
      _wdelchPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wdeleteln(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wdeleteln(
      arg0,
    );
  }

  late final _wdeletelnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wdeleteln');
  late final _wdeleteln =
      _wdeletelnPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wechochar(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wechochar(
      arg0,
      arg1,
    );
  }

  late final _wechocharPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, chtype)>>(
      'wechochar');
  late final _wechochar =
      _wechocharPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  bool wenclose(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wenclose(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wenclosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('wenclose');
  late final _wenclose =
      _wenclosePtr.asFunction<bool Function(ffi.Pointer<WINDOW>, int, int)>();

  int werase(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _werase(
      arg0,
    );
  }

  late final _werasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'werase');
  late final _werase =
      _werasePtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wgetch(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wgetch(
      arg0,
    );
  }

  late final _wgetchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wgetch');
  late final _wgetch =
      _wgetchPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wgetdelay(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wgetdelay(
      arg0,
    );
  }

  late final _wgetdelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wgetdelay');
  late final _wgetdelay =
      _wgetdelayPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wgetnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _wgetnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wgetnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('wgetnstr');
  late final _wgetnstr = _wgetnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>, int)>();

  /// These extensions provide access to information stored in the WINDOW even
  /// when NCURSES_OPAQUE is set:
  ffi.Pointer<WINDOW> wgetparent(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wgetparent(
      arg0,
    );
  }

  late final _wgetparentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>)>>('wgetparent');
  late final _wgetparent = _wgetparentPtr
      .asFunction<ffi.Pointer<WINDOW> Function(ffi.Pointer<WINDOW>)>();

  int wgetscrreg(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _wgetscrreg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wgetscrregPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('wgetscrreg');
  late final _wgetscrreg = _wgetscrregPtr.asFunction<
      int Function(
          ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int wgetstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wgetstr(
      arg0,
      arg1,
    );
  }

  late final _wgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('wgetstr');
  late final _wgetstr = _wgetstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  int whline(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _whline(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _whlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, chtype, ffi.Int)>>('whline');
  late final _whline =
      _whlinePtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int winch(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _winch(
      arg0,
    );
  }

  late final _winchPtr =
      _lookup<ffi.NativeFunction<chtype Function(ffi.Pointer<WINDOW>)>>(
          'winch');
  late final _winch = _winchPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int winchnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<chtype> arg1,
    int arg2,
  ) {
    return _winchnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _winchnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<chtype>, ffi.Int)>>('winchnstr');
  late final _winchnstr = _winchnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<chtype>, int)>();

  int winchstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<chtype> arg1,
  ) {
    return _winchstr(
      arg0,
      arg1,
    );
  }

  late final _winchstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<chtype>)>>('winchstr');
  late final _winchstr = _winchstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<chtype>)>();

  int winnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _winnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _winnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>, ffi.Int)>>('winnstr');
  late final _winnstr = _winnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>, int)>();

  int winsch(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _winsch(
      arg0,
      arg1,
    );
  }

  late final _winschPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, chtype)>>(
      'winsch');
  late final _winsch =
      _winschPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int winsdelln(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _winsdelln(
      arg0,
      arg1,
    );
  }

  late final _winsdellnPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'winsdelln');
  late final _winsdelln =
      _winsdellnPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int winsertln(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _winsertln(
      arg0,
    );
  }

  late final _winsertlnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'winsertln');
  late final _winsertln =
      _winsertlnPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int winsnstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _winsnstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _winsnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('winsnstr');
  late final _winsnstr = _winsnstrPtr.asFunction<
      int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>, int)>();

  int winsstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _winsstr(
      arg0,
      arg1,
    );
  }

  late final _winsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('winsstr');
  late final _winsstr = _winsstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  int winstr(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _winstr(
      arg0,
      arg1,
    );
  }

  late final _winstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('winstr');
  late final _winstr = _winstrPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  bool wmouse_trafo(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
    bool arg3,
  ) {
    return _wmouse_trafo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wmouse_trafoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Bool)>>('wmouse_trafo');
  late final _wmouse_trafo = _wmouse_trafoPtr.asFunction<
      bool Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, bool)>();

  int wmove(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wmove(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('wmove');
  late final _wmove =
      _wmovePtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int wnoutrefresh(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wnoutrefresh(
      arg0,
    );
  }

  late final _wnoutrefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wnoutrefresh');
  late final _wnoutrefresh =
      _wnoutrefreshPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wprintw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wprintw(
      arg0,
      arg1,
    );
  }

  late final _wprintwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('wprintw');
  late final _wprintw = _wprintwPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  int wredrawln(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wredrawln(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wredrawlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('wredrawln');
  late final _wredrawln =
      _wredrawlnPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int wrefresh(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wrefresh(
      arg0,
    );
  }

  late final _wrefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wrefresh');
  late final _wrefresh =
      _wrefreshPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wresize(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wresize(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wresizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('wresize');
  late final _wresize =
      _wresizePtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int wscanw(
    ffi.Pointer<WINDOW> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wscanw(
      arg0,
      arg1,
    );
  }

  late final _wscanwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>>('wscanw');
  late final _wscanw = _wscanwPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Char>)>();

  int wscrl(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wscrl(
      arg0,
      arg1,
    );
  }

  late final _wscrlPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'wscrl');
  late final _wscrl =
      _wscrlPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int)>();

  int wsetscrreg(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wsetscrreg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wsetscrregPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int)>>('wsetscrreg');
  late final _wsetscrreg =
      _wsetscrregPtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();

  int wstandend(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wstandend(
      arg0,
    );
  }

  late final _wstandendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wstandend');
  late final _wstandend =
      _wstandendPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  int wstandout(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wstandout(
      arg0,
    );
  }

  late final _wstandoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WINDOW>)>>(
          'wstandout');
  late final _wstandout =
      _wstandoutPtr.asFunction<int Function(ffi.Pointer<WINDOW>)>();

  void wsyncdown(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wsyncdown(
      arg0,
    );
  }

  late final _wsyncdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>)>>(
          'wsyncdown');
  late final _wsyncdown =
      _wsyncdownPtr.asFunction<void Function(ffi.Pointer<WINDOW>)>();

  void wsyncup(
    ffi.Pointer<WINDOW> arg0,
  ) {
    return _wsyncup(
      arg0,
    );
  }

  late final _wsyncupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>)>>(
          'wsyncup');
  late final _wsyncup =
      _wsyncupPtr.asFunction<void Function(ffi.Pointer<WINDOW>)>();

  void wtimeout(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
  ) {
    return _wtimeout(
      arg0,
      arg1,
    );
  }

  late final _wtimeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WINDOW>, ffi.Int)>>(
      'wtimeout');
  late final _wtimeout =
      _wtimeoutPtr.asFunction<void Function(ffi.Pointer<WINDOW>, int)>();

  int wtouchln(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _wtouchln(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wtouchlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WINDOW>, ffi.Int, ffi.Int, ffi.Int)>>('wtouchln');
  late final _wtouchln = _wtouchlnPtr
      .asFunction<int Function(ffi.Pointer<WINDOW>, int, int, int)>();

  int wvline(
    ffi.Pointer<WINDOW> arg0,
    int arg1,
    int arg2,
  ) {
    return _wvline(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wvlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WINDOW>, chtype, ffi.Int)>>('wvline');
  late final _wvline =
      _wvlinePtr.asFunction<int Function(ffi.Pointer<WINDOW>, int, int)>();
}

const int ALL_MOUSE_EVENTS = 268435455;

const int A_ALTCHARSET = 4194304;

const int A_ATTRIBUTES = 4294967040;

const int A_BLINK = 524288;

const int A_BOLD = 2097152;

const int A_CHARTEXT = 255;

const int A_COLOR = 65280;

const int A_DIM = 1048576;

const int A_HORIZONTAL = 33554432;

const int A_INVIS = 8388608;

const int A_ITALIC = 2147483648;

const int A_LEFT = 67108864;

const int A_LOW = 134217728;

const int A_NORMAL = 0;

const int A_PROTECT = 16777216;

const int A_REVERSE = 262144;

const int A_RIGHT = 268435456;

const int A_STANDOUT = 65536;

const int A_TOP = 536870912;

const int A_UNDERLINE = 131072;

const int A_VERTICAL = 1073741824;

const int BUFSIZ = 8192;

const int BUTTON1_CLICKED = 4;

const int BUTTON1_DOUBLE_CLICKED = 8;

const int BUTTON1_PRESSED = 2;

const int BUTTON1_RELEASED = 1;

const int BUTTON1_TRIPLE_CLICKED = 16;

const int BUTTON2_CLICKED = 128;

const int BUTTON2_DOUBLE_CLICKED = 256;

const int BUTTON2_PRESSED = 64;

const int BUTTON2_RELEASED = 32;

const int BUTTON2_TRIPLE_CLICKED = 512;

const int BUTTON3_CLICKED = 4096;

const int BUTTON3_DOUBLE_CLICKED = 8192;

const int BUTTON3_PRESSED = 2048;

const int BUTTON3_RELEASED = 1024;

const int BUTTON3_TRIPLE_CLICKED = 16384;

const int BUTTON4_CLICKED = 131072;

const int BUTTON4_DOUBLE_CLICKED = 262144;

const int BUTTON4_PRESSED = 65536;

const int BUTTON4_RELEASED = 32768;

const int BUTTON4_TRIPLE_CLICKED = 524288;

const int BUTTON5_CLICKED = 4194304;

const int BUTTON5_DOUBLE_CLICKED = 8388608;

const int BUTTON5_PRESSED = 2097152;

const int BUTTON5_RELEASED = 1048576;

const int BUTTON5_TRIPLE_CLICKED = 16777216;

const int BUTTON_ALT = 134217728;

const int BUTTON_CTRL = 33554432;

const int BUTTON_SHIFT = 67108864;

const int COLOR_BLACK = 0;

const int COLOR_BLUE = 4;

const int COLOR_CYAN = 6;

const int COLOR_GREEN = 2;

const int COLOR_MAGENTA = 5;

const int COLOR_RED = 1;

const int COLOR_WHITE = 7;

const int COLOR_YELLOW = 3;

const int CURSES = 1;

const int CURSES_H = 1;

const int EOF = -1;

const int ERR = -1;

const int FALSE = 0;

typedef FILE = _IO_FILE;

const int FILENAME_MAX = 4096;

const int FOPEN_MAX = 16;

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int INT32_MAX = 2147483647;

const int INT32_MIN = -2147483648;

const int INT64_MAX = 9223372036854775807;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT8_MIN = -128;

const int INTMAX_MAX = 9223372036854775807;

const int INTMAX_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MAX = 9223372036854775807;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST8_MIN = -128;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MAX = 9223372036854775807;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST8_MIN = -128;

const int KEY_A1 = 348;

const int KEY_A3 = 349;

const int KEY_B2 = 350;

const int KEY_BACKSPACE = 263;

const int KEY_BEG = 354;

const int KEY_BREAK = 257;

const int KEY_BTAB = 353;

const int KEY_C1 = 351;

const int KEY_C3 = 352;

const int KEY_CANCEL = 355;

const int KEY_CATAB = 342;

const int KEY_CLEAR = 333;

const int KEY_CLOSE = 356;

const int KEY_CODE_YES = 256;

const int KEY_COMMAND = 357;

const int KEY_COPY = 358;

const int KEY_CREATE = 359;

const int KEY_CTAB = 341;

const int KEY_DC = 330;

const int KEY_DL = 328;

const int KEY_DOWN = 258;

const int KEY_EIC = 332;

const int KEY_END = 360;

const int KEY_ENTER = 343;

const int KEY_EOL = 335;

const int KEY_EOS = 334;

const int KEY_EXIT = 361;

const int KEY_F0 = 264;

const int KEY_FIND = 362;

const int KEY_HELP = 363;

const int KEY_HOME = 262;

const int KEY_IC = 331;

const int KEY_IL = 329;

const int KEY_LEFT = 260;

const int KEY_LL = 347;

const int KEY_MARK = 364;

const int KEY_MAX = 511;

const int KEY_MESSAGE = 365;

const int KEY_MIN = 257;

const int KEY_MOUSE = 409;

const int KEY_MOVE = 366;

const int KEY_NEXT = 367;

const int KEY_NPAGE = 338;

const int KEY_OPEN = 368;

const int KEY_OPTIONS = 369;

const int KEY_PPAGE = 339;

const int KEY_PREVIOUS = 370;

const int KEY_PRINT = 346;

const int KEY_REDO = 371;

const int KEY_REFERENCE = 372;

const int KEY_REFRESH = 373;

const int KEY_REPLACE = 374;

const int KEY_RESET = 345;

const int KEY_RESIZE = 410;

const int KEY_RESTART = 375;

const int KEY_RESUME = 376;

const int KEY_RIGHT = 261;

const int KEY_SAVE = 377;

const int KEY_SBEG = 378;

const int KEY_SCANCEL = 379;

const int KEY_SCOMMAND = 380;

const int KEY_SCOPY = 381;

const int KEY_SCREATE = 382;

const int KEY_SDC = 383;

const int KEY_SDL = 384;

const int KEY_SELECT = 385;

const int KEY_SEND = 386;

const int KEY_SEOL = 387;

const int KEY_SEXIT = 388;

const int KEY_SF = 336;

const int KEY_SFIND = 389;

const int KEY_SHELP = 390;

const int KEY_SHOME = 391;

const int KEY_SIC = 392;

const int KEY_SLEFT = 393;

const int KEY_SMESSAGE = 394;

const int KEY_SMOVE = 395;

const int KEY_SNEXT = 396;

const int KEY_SOPTIONS = 397;

const int KEY_SPREVIOUS = 398;

const int KEY_SPRINT = 399;

const int KEY_SR = 337;

const int KEY_SREDO = 400;

const int KEY_SREPLACE = 401;

const int KEY_SRESET = 344;

const int KEY_SRIGHT = 402;

const int KEY_SRSUME = 403;

const int KEY_SSAVE = 404;

const int KEY_SSUSPEND = 405;

const int KEY_STAB = 340;

const int KEY_SUNDO = 406;

const int KEY_SUSPEND = 407;

const int KEY_UNDO = 408;

const int KEY_UP = 259;

const int L_ctermid = 9;

const int L_tmpnam = 20;

class MEVENT extends ffi.Struct {
  /// ID to distinguish multiple devices
  @ffi.Short()
  external int id;

  /// event coordinates (character-cell)
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int z;

  /// button state bits
  @mmask_t()
  external int bstate;
}

const int NCURSES_ATTR_SHIFT = 8;

const int NCURSES_BUTTON_CLICKED = 4;

const int NCURSES_BUTTON_PRESSED = 2;

const int NCURSES_BUTTON_RELEASED = 1;

const int NCURSES_DLL_H_incl = 1;

const int NCURSES_DOUBLE_CLICKED = 8;

const int NCURSES_ENABLE_STDBOOL_H = 1;

const int NCURSES_EXT_FUNCS = 20230128;

const int NCURSES_INTEROP_FUNCS = 1;

const int NCURSES_MOUSE_VERSION = 2;

const int NCURSES_OPAQUE = 0;

const int NCURSES_OPAQUE_FORM = 0;

const int NCURSES_OPAQUE_MENU = 0;

const int NCURSES_OPAQUE_PANEL = 0;

/// Curses uses a helper function.  Define our type for this to simplify
/// extending it for the sp-funcs feature.
typedef NCURSES_OUTC
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>;
typedef NCURSES_OUTC_sp = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Int)>>;

const int NCURSES_REENTRANT = 0;

const int NCURSES_RESERVED_EVENT = 32;

typedef NCURSES_SCREEN_CB = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<SCREEN>, ffi.Pointer<ffi.Void>)>>;

const int NCURSES_SP_FUNCS = 20230128;

const int NCURSES_TPARM_VARARGS = 1;

const int NCURSES_TRIPLE_CLICKED = 16;

const int NCURSES_UNCTRL_H_incl = 1;

const String NCURSES_VERSION = '6.3';

const int NCURSES_VERSION_MAJOR = 6;

const int NCURSES_VERSION_MINOR = 4;

const int NCURSES_VERSION_PATCH = 20230128;

const int NCURSES_WATTR_MACROS = 0;

const int NCURSES_WCWIDTH_GRAPHICS = 1;

const int NCURSES_WIDECHAR = 1;

typedef NCURSES_WINDOW_CB = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<WINDOW>, ffi.Pointer<ffi.Void>)>>;

const int NULL = 0;

const int OK = 0;

const int PTRDIFF_MAX = 9223372036854775807;

const int PTRDIFF_MIN = -9223372036854775808;

const String P_tmpdir = '/tmp';

const int REPORT_MOUSE_POSITION = 268435456;

typedef SCREEN = screen;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIZE_MAX = -1;

const int TMP_MAX = 238328;

const int TRACE_ATTRS = 4096;

const int TRACE_BITS = 256;

const int TRACE_CALLS = 32;

const int TRACE_CCALLS = 1024;

const int TRACE_CHARPUT = 16;

const int TRACE_DATABASE = 2048;

const int TRACE_DISABLE = 0;

const int TRACE_ICALLS = 512;

const int TRACE_IEVENT = 128;

const int TRACE_MAXIMUM = 8191;

const int TRACE_MOVE = 8;

const int TRACE_ORDINARY = 31;

const int TRACE_SHIFT = 13;

const int TRACE_TIMES = 1;

const int TRACE_TPUTS = 2;

const int TRACE_UPDATE = 4;

const int TRACE_VIRTPUT = 64;

const int TRUE = 1;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int UINT8_MAX = 255;

const int UINTMAX_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int UINT_FAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int UINT_LEAST8_MAX = 255;

class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

const int WA_ALTCHARSET = 4194304;

const int WA_ATTRIBUTES = 4294967040;

const int WA_BLINK = 524288;

const int WA_BOLD = 2097152;

const int WA_DIM = 1048576;

const int WA_HORIZONTAL = 33554432;

const int WA_INVIS = 8388608;

const int WA_ITALIC = 2147483648;

const int WA_LEFT = 67108864;

const int WA_LOW = 134217728;

const int WA_NORMAL = 0;

const int WA_PROTECT = 16777216;

const int WA_REVERSE = 262144;

const int WA_RIGHT = 268435456;

const int WA_STANDOUT = 65536;

const int WA_TOP = 536870912;

const int WA_UNDERLINE = 131072;

const int WA_VERTICAL = 1073741824;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

typedef WINDOW = _win_st;

const int WINT_MAX = 4294967295;

const int WINT_MIN = 0;

const int _ATFILE_SOURCE = 1;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDIO_LIM_H = 1;

const int _BITS_TIME64_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_WCHAR_H = 1;

const int _DEFAULT_SOURCE = 1;

const int _ENDLINE = 2;

const int _FEATURES_H = 1;

const int _FULLWIN = 4;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

const int _HASMOVED = 32;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

const int _IO_USER_LOCK = 32768;

class _IO_codecvt extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_marker extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

const int _ISPAD = 16;

const int _NEWINDEX = -1;

const int _NOCHANGE = -1;

const int _POSIX_C_SOURCE = 200809;

const int _POSIX_SOURCE = 1;

const int _SCROLLWIN = 8;

const int _STDC_PREDEF_H = 1;

const int _STDINT_H = 1;

const int _STDIO_H = 1;

const int _SUBWIN = 1;

const int _SYS_CDEFS_H = 1;

const int _WRAPPED = 64;

const int __FD_SETSIZE = 1024;

const int __FILE_defined = 1;

const int __GLIBC_MINOR__ = 36;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC__ = 2;

const int __GNUC_VA_LIST = 1;

const int __GNU_LIBRARY__ = 6;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __INO_T_MATCHES_INO64_T = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __SYSCALL_WORDSIZE = 64;

const int __THROW = 1;

const int __THROWNL = 1;

const int __TIMESIZE = 64;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __USE_ISOC11 = 1;

const int __USE_ISOC95 = 1;

const int __USE_ISOC99 = 1;

const int __USE_MISC = 1;

const int __USE_POSIX = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_POSIX2 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int ____FILE_defined = 1;

const int _____fpos64_t_defined = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

typedef __fpos_t = _G_fpos_t;

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

const int __glibc_c99_flexarr_available = 1;

class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

typedef __off64_t = ffi.Long;
typedef __off_t = ffi.Long;
typedef __ssize_t = ffi.Long;

const int __struct_FILE_defined = 1;

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class _win_st extends ffi.Struct {
  /// current cursor position
  @ffi.Short()
  external int cury;

  @ffi.Short()
  external int curx;

  /// maximums of x and y, NOT window size
  @ffi.Short()
  external int maxy;

  @ffi.Short()
  external int maxx;

  /// screen coords of upper-left-hand corner
  @ffi.Short()
  external int begy;

  @ffi.Short()
  external int begx;

  /// window state flags
  @ffi.Short()
  external int flags;

  /// current attribute for non-space character
  @attr_t()
  external int attrs;

  /// current background char/attribute pair
  @chtype()
  external int bkgd;

  /// no time out on function-key entry?
  @ffi.Bool()
  external bool notimeout;

  /// consider all data in the window invalid?
  @ffi.Bool()
  external bool clear;

  /// OK to not reset cursor on exit?
  @ffi.Bool()
  external bool leaveok;

  /// OK to scroll this window?
  @ffi.Bool()
  external bool scroll;

  /// OK to use insert/delete line?
  @ffi.Bool()
  external bool idlok;

  /// OK to use insert/delete char?
  @ffi.Bool()
  external bool idcok;

  /// window in immed mode? (not yet used)
  @ffi.Bool()
  external bool immed;

  /// window in sync mode?
  @ffi.Bool()
  external bool sync1;

  /// process function keys into KEY_ symbols?
  @ffi.Bool()
  external bool use_keypad;

  /// 0 = nodelay, <0 = blocking, >0 = delay
  @ffi.Int()
  external int delay;

  /// the actual line data
  external ffi.Pointer<ldat> line;

  /// top line of scrolling region
  @ffi.Short()
  external int regtop;

  /// bottom line of scrolling region
  @ffi.Short()
  external int regbottom;

  /// x coordinate of this window in parent
  @ffi.Int()
  external int parx;

  /// y coordinate of this window in parent
  @ffi.Int()
  external int pary;

  /// pointer to parent if a sub-window
  external ffi.Pointer<WINDOW> parent;

  external pdat pad;

  /// real begy is _begy + _yoffset
  @ffi.Short()
  external int yoffset;
}

typedef attr_t = chtype;
typedef chtype = ffi.UnsignedInt;

const int false1 = 0;

typedef fpos_t = __fpos_t;

class ldat extends ffi.Opaque {}

typedef mmask_t = ffi.UnsignedInt;

/// these are used only if this is a pad
class pdat extends ffi.Struct {
  @ffi.Short()
  external int _pad_y;

  @ffi.Short()
  external int _pad_x;

  @ffi.Short()
  external int _pad_top;

  @ffi.Short()
  external int _pad_left;

  @ffi.Short()
  external int _pad_bottom;

  @ffi.Short()
  external int _pad_right;
}

class screen extends ffi.Opaque {}

const int true1 = 1;
